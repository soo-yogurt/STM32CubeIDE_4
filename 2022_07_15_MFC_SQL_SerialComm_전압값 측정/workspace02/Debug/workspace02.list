
workspace02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000479c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c4  080049c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049cc  080049cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000130  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a0  200001a0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0c3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000273d  00000000  00000000  0002e163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  000308a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009a8  00000000  00000000  00031360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002596c  00000000  00000000  00031d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f485  00000000  00000000  00057674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e49f4  00000000  00000000  00066af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b4ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002dc8  00000000  00000000  0014b540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004934 	.word	0x08004934

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004934 	.word	0x08004934

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	463b      	mov	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <MX_ADC1_Init+0x98>)
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <MX_ADC1_Init+0x9c>)
 80005aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_ADC1_Init+0x98>)
 80005ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <MX_ADC1_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_ADC1_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_ADC1_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_ADC1_Init+0x98>)
 80005d6:	4a17      	ldr	r2, [pc, #92]	; (8000634 <MX_ADC1_Init+0xa0>)
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_ADC1_Init+0x98>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_ADC1_Init+0x98>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <MX_ADC1_Init+0x98>)
 80005f6:	f000 fcff 	bl	8000ff8 <HAL_ADC_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000600:	f000 fab6 	bl	8000b70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000604:	2303      	movs	r3, #3
 8000606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000608:	2301      	movs	r3, #1
 800060a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_ADC1_Init+0x98>)
 8000616:	f000 ff43 	bl	80014a0 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000620:	f000 faa6 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000008c 	.word	0x2000008c
 8000630:	40012000 	.word	0x40012000
 8000634:	0f000001 	.word	0x0f000001

08000638 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <HAL_ADC_MspInit+0x7c>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d127      	bne.n	80006aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 8000664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000668:	6453      	str	r3, [r2, #68]	; 0x44
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000692:	2308      	movs	r3, #8
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <HAL_ADC_MspInit+0x84>)
 80006a6:	f001 fad7 	bl	8001c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40012000 	.word	0x40012000
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020000 	.word	0x40020000

080006c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a2c      	ldr	r2, [pc, #176]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a25      	ldr	r2, [pc, #148]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a17      	ldr	r2, [pc, #92]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2181      	movs	r1, #129	; 0x81
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_GPIO_Init+0xd4>)
 800074c:	f001 fc30 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000750:	2309      	movs	r3, #9
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000754:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_GPIO_Init+0xd8>)
 8000766:	f001 fa77 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 800076a:	2381      	movs	r3, #129	; 0x81
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000782:	f001 fa69 	bl	8001c58 <HAL_GPIO_Init>

}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40020400 	.word	0x40020400
 8000798:	40020800 	.word	0x40020800

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f000 fb94 	bl	8000ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f83c 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f7ff ff8a 	bl	80006c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007ac:	f7ff fef2 	bl	8000594 <MX_ADC1_Init>
  MX_RTC_Init();
 80007b0:	f000 f9e4 	bl	8000b7c <MX_RTC_Init>
  MX_USART3_UART_Init();
 80007b4:	f000 faee 	bl	8000d94 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007b8:	f000 f8a4 	bl	8000904 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  memset(rx_buf, 0, sizeof(rx_buf));
 80007bc:	2214      	movs	r2, #20
 80007be:	2100      	movs	r1, #0
 80007c0:	4811      	ldr	r0, [pc, #68]	; (8000808 <main+0x6c>)
 80007c2:	f003 fc2b 	bl	800401c <memset>
  memset(tx_buf, 0, sizeof(tx_buf));
 80007c6:	2214      	movs	r2, #20
 80007c8:	2100      	movs	r1, #0
 80007ca:	4810      	ldr	r0, [pc, #64]	; (800080c <main+0x70>)
 80007cc:	f003 fc26 	bl	800401c <memset>
  HAL_UART_Receive_IT(&huart3, &rx, 1);
 80007d0:	2201      	movs	r2, #1
 80007d2:	490f      	ldr	r1, [pc, #60]	; (8000810 <main+0x74>)
 80007d4:	480f      	ldr	r0, [pc, #60]	; (8000814 <main+0x78>)
 80007d6:	f002 fc5e 	bl	8003096 <HAL_UART_Receive_IT>
  HAL_ADC_Start_IT(&hadc1);
 80007da:	480f      	ldr	r0, [pc, #60]	; (8000818 <main+0x7c>)
 80007dc:	f000 fc50 	bl	8001080 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag == 1){
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <main+0x80>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d1fb      	bne.n	80007e0 <main+0x44>
		  memset(rx_buf, 0, sizeof(rx_buf));
 80007e8:	2214      	movs	r2, #20
 80007ea:	2100      	movs	r1, #0
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <main+0x6c>)
 80007ee:	f003 fc15 	bl	800401c <memset>
		  Transmit_ADC_value_now();
 80007f2:	f000 f8ab 	bl	800094c <Transmit_ADC_value_now>
		  flag = 0;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <main+0x80>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart3, &rx, 1);
 80007fc:	2201      	movs	r2, #1
 80007fe:	4904      	ldr	r1, [pc, #16]	; (8000810 <main+0x74>)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <main+0x78>)
 8000802:	f002 fc48 	bl	8003096 <HAL_UART_Receive_IT>
	  if(flag == 1){
 8000806:	e7eb      	b.n	80007e0 <main+0x44>
 8000808:	20000104 	.word	0x20000104
 800080c:	200000f0 	.word	0x200000f0
 8000810:	2000011c 	.word	0x2000011c
 8000814:	20000148 	.word	0x20000148
 8000818:	2000008c 	.word	0x2000008c
 800081c:	20000120 	.word	0x20000120

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	; 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fbf4 	bl	800401c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <SystemClock_Config+0xdc>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a2b      	ldr	r2, [pc, #172]	; (80008fc <SystemClock_Config+0xdc>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b29      	ldr	r3, [pc, #164]	; (80008fc <SystemClock_Config+0xdc>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b26      	ldr	r3, [pc, #152]	; (8000900 <SystemClock_Config+0xe0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a25      	ldr	r2, [pc, #148]	; (8000900 <SystemClock_Config+0xe0>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <SystemClock_Config+0xe0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800087c:	2306      	movs	r3, #6
 800087e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000880:	2301      	movs	r3, #1
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2310      	movs	r3, #16
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000894:	2308      	movs	r3, #8
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000898:	23b4      	movs	r3, #180	; 0xb4
 800089a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fc03 	bl	80020b4 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008b4:	f000 f95c 	bl	8000b70 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008b8:	f001 fbac 	bl	8002014 <HAL_PWREx_EnableOverDrive>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008c2:	f000 f955 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	230f      	movs	r3, #15
 80008c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ca:	2302      	movs	r3, #2
 80008cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	2105      	movs	r1, #5
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fe5d 	bl	80025a4 <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008f0:	f000 f93e 	bl	8000b70 <Error_Handler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	; 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	2027      	movs	r0, #39	; 0x27
 800090e:	f001 f8da 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000912:	2027      	movs	r0, #39	; 0x27
 8000914:	f001 f8f3 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2012      	movs	r0, #18
 800091e:	f001 f8d2 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000922:	2012      	movs	r0, #18
 8000924:	f001 f8eb 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	2100      	movs	r1, #0
 800092c:	2009      	movs	r0, #9
 800092e:	f001 f8ca 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000932:	2009      	movs	r0, #9
 8000934:	f001 f8e3 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	2006      	movs	r0, #6
 800093e:	f001 f8c2 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000942:	2006      	movs	r0, #6
 8000944:	f001 f8db 	bl	8001afe <HAL_NVIC_EnableIRQ>
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <Transmit_ADC_value_now>:

/* USER CODE BEGIN 4 */
void Transmit_ADC_value_now()
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 8000952:	4813      	ldr	r0, [pc, #76]	; (80009a0 <Transmit_ADC_value_now+0x54>)
 8000954:	f000 fb94 	bl	8001080 <HAL_ADC_Start_IT>
	sprintf(tx_buf, "Now%04d>", ADC_value);
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <Transmit_ADC_value_now+0x58>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4912      	ldr	r1, [pc, #72]	; (80009a8 <Transmit_ADC_value_now+0x5c>)
 8000960:	4812      	ldr	r0, [pc, #72]	; (80009ac <Transmit_ADC_value_now+0x60>)
 8000962:	f003 fb63 	bl	800402c <siprintf>

	for(int i = 0 ; i < sizeof(tx_buf); i++)
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	e00d      	b.n	8000988 <Transmit_ADC_value_now+0x3c>
	{
		HAL_UART_Transmit(&huart3, (uint8_t*) tx_buf+i, 1, 10);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <Transmit_ADC_value_now+0x60>)
 8000970:	1899      	adds	r1, r3, r2
 8000972:	230a      	movs	r3, #10
 8000974:	2201      	movs	r2, #1
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <Transmit_ADC_value_now+0x64>)
 8000978:	f002 fafb 	bl	8002f72 <HAL_UART_Transmit>
		HAL_Delay(5);
 800097c:	2005      	movs	r0, #5
 800097e:	f000 fb17 	bl	8000fb0 <HAL_Delay>
	for(int i = 0 ; i < sizeof(tx_buf); i++)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3301      	adds	r3, #1
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b13      	cmp	r3, #19
 800098c:	d9ee      	bls.n	800096c <Transmit_ADC_value_now+0x20>
	}


	memset(tx_buf, 0, sizeof(tx_buf));
 800098e:	2214      	movs	r2, #20
 8000990:	2100      	movs	r1, #0
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <Transmit_ADC_value_now+0x60>)
 8000994:	f003 fb42 	bl	800401c <memset>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000008c 	.word	0x2000008c
 80009a4:	200000d4 	.word	0x200000d4
 80009a8:	0800494c 	.word	0x0800494c
 80009ac:	200000f0 	.word	0x200000f0
 80009b0:	20000148 	.word	0x20000148

080009b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a06      	ldr	r2, [pc, #24]	; (80009dc <HAL_ADC_ConvCpltCallback+0x28>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d106      	bne.n	80009d4 <HAL_ADC_ConvCpltCallback+0x20>
	{
		ADC_value = HAL_ADC_GetValue(&hadc1);
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80009c8:	f000 fd48 	bl	800145c <HAL_ADC_GetValue>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <HAL_ADC_ConvCpltCallback+0x30>)
 80009d2:	601a      	str	r2, [r3, #0]
	}
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40012000 	.word	0x40012000
 80009e0:	2000008c 	.word	0x2000008c
 80009e4:	200000d4 	.word	0x200000d4

080009e8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d124      	bne.n	8000a42 <HAL_GPIO_EXTI_Callback+0x5a>
		current_time_pin0 = HAL_GetTick();
 80009f8:	f000 face 	bl	8000f98 <HAL_GetTick>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000a02:	601a      	str	r2, [r3, #0]
		time_interval_pin0 = current_time_pin0 - last_time_pin0;
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	4a25      	ldr	r2, [pc, #148]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000a10:	6013      	str	r3, [r2, #0]
		last_time_pin0 = current_time_pin0;
 8000a12:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a22      	ldr	r2, [pc, #136]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000a18:	6013      	str	r3, [r2, #0]

		if (time_interval_pin0 <= NOISE) {
 8000a1a:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2be0      	cmp	r3, #224	; 0xe0
 8000a20:	dd0f      	ble.n	8000a42 <HAL_GPIO_EXTI_Callback+0x5a>
		} else {
			HAL_ADC_Start_IT(&hadc1);
 8000a22:	4821      	ldr	r0, [pc, #132]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000a24:	f000 fb2c 	bl	8001080 <HAL_ADC_Start_IT>
			sprintf(tx_buf, "B1%04d>", ADC_value);
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <HAL_GPIO_EXTI_Callback+0xc4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4920      	ldr	r1, [pc, #128]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a30:	4820      	ldr	r0, [pc, #128]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000a32:	f003 fafb 	bl	800402c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) tx_buf, sizeof(tx_buf), 10);
 8000a36:	230a      	movs	r3, #10
 8000a38:	2214      	movs	r2, #20
 8000a3a:	491e      	ldr	r1, [pc, #120]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000a3c:	481e      	ldr	r0, [pc, #120]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000a3e:	f002 fa98 	bl	8002f72 <HAL_UART_Transmit>
		}
	}
	if (GPIO_Pin == GPIO_PIN_3) {
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	2b08      	cmp	r3, #8
 8000a46:	d124      	bne.n	8000a92 <HAL_GPIO_EXTI_Callback+0xaa>
		current_time_pin3 = HAL_GetTick();
 8000a48:	f000 faa6 	bl	8000f98 <HAL_GetTick>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000a52:	601a      	str	r2, [r3, #0]
		time_interval_pin3 = current_time_pin3 - last_time_pin3;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000a60:	6013      	str	r3, [r2, #0]
		last_time_pin3 = current_time_pin3;
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000a68:	6013      	str	r3, [r2, #0]

		if (time_interval_pin3 <= NOISE) {
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2be0      	cmp	r3, #224	; 0xe0
 8000a70:	dd0f      	ble.n	8000a92 <HAL_GPIO_EXTI_Callback+0xaa>
		} else {
			HAL_ADC_Start_IT(&hadc1);
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000a74:	f000 fb04 	bl	8001080 <HAL_ADC_Start_IT>
			sprintf(tx_buf, "B2%04d>", ADC_value);
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_GPIO_EXTI_Callback+0xc4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4912      	ldr	r1, [pc, #72]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000a82:	f003 fad3 	bl	800402c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) tx_buf, sizeof(tx_buf), 10);
 8000a86:	230a      	movs	r3, #10
 8000a88:	2214      	movs	r2, #20
 8000a8a:	490a      	ldr	r1, [pc, #40]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000a8c:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000a8e:	f002 fa70 	bl	8002f72 <HAL_UART_Transmit>
		}
	}
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000d8 	.word	0x200000d8
 8000aa0:	200000e0 	.word	0x200000e0
 8000aa4:	200000dc 	.word	0x200000dc
 8000aa8:	2000008c 	.word	0x2000008c
 8000aac:	200000d4 	.word	0x200000d4
 8000ab0:	08004958 	.word	0x08004958
 8000ab4:	200000f0 	.word	0x200000f0
 8000ab8:	20000148 	.word	0x20000148
 8000abc:	200000ec 	.word	0x200000ec
 8000ac0:	200000e8 	.word	0x200000e8
 8000ac4:	200000e4 	.word	0x200000e4
 8000ac8:	08004960 	.word	0x08004960

08000acc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <HAL_UART_RxCpltCallback+0x88>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d136      	bne.n	8000b4c <HAL_UART_RxCpltCallback+0x80>
		if ((rx == '\n') && (rx_buf[bufindex - 1] == '>') && (rx_buf[0] == '<')) {
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <HAL_UART_RxCpltCallback+0x8c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b0a      	cmp	r3, #10
 8000ae4:	d11e      	bne.n	8000b24 <HAL_UART_RxCpltCallback+0x58>
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <HAL_UART_RxCpltCallback+0x90>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <HAL_UART_RxCpltCallback+0x94>)
 8000aee:	5cd3      	ldrb	r3, [r2, r3]
 8000af0:	2b3e      	cmp	r3, #62	; 0x3e
 8000af2:	d117      	bne.n	8000b24 <HAL_UART_RxCpltCallback+0x58>
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_UART_RxCpltCallback+0x94>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b3c      	cmp	r3, #60	; 0x3c
 8000afa:	d113      	bne.n	8000b24 <HAL_UART_RxCpltCallback+0x58>
			rx_buf[bufindex] = 0;
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_UART_RxCpltCallback+0x90>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <HAL_UART_RxCpltCallback+0x94>)
 8000b02:	2100      	movs	r1, #0
 8000b04:	54d1      	strb	r1, [r2, r3]
			char *p;
			if ((p = strstr((char*) rx_buf, "ReturnToValue")) != 0) {
 8000b06:	4917      	ldr	r1, [pc, #92]	; (8000b64 <HAL_UART_RxCpltCallback+0x98>)
 8000b08:	4815      	ldr	r0, [pc, #84]	; (8000b60 <HAL_UART_RxCpltCallback+0x94>)
 8000b0a:	f003 faaf 	bl	800406c <strstr>
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d019      	beq.n	8000b4a <HAL_UART_RxCpltCallback+0x7e>
				bufindex = 0;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_UART_RxCpltCallback+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
				flag = 1;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_UART_RxCpltCallback+0x9c>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]
		if ((rx == '\n') && (rx_buf[bufindex - 1] == '>') && (rx_buf[0] == '<')) {
 8000b22:	e012      	b.n	8000b4a <HAL_UART_RxCpltCallback+0x7e>
			}
		}
		else if (bufindex < 20) {
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_UART_RxCpltCallback+0x90>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b13      	cmp	r3, #19
 8000b2a:	dc0f      	bgt.n	8000b4c <HAL_UART_RxCpltCallback+0x80>
			rx_buf[bufindex++] = rx;
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_UART_RxCpltCallback+0x90>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	1c5a      	adds	r2, r3, #1
 8000b32:	490a      	ldr	r1, [pc, #40]	; (8000b5c <HAL_UART_RxCpltCallback+0x90>)
 8000b34:	600a      	str	r2, [r1, #0]
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_UART_RxCpltCallback+0x8c>)
 8000b38:	7811      	ldrb	r1, [r2, #0]
 8000b3a:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <HAL_UART_RxCpltCallback+0x94>)
 8000b3c:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Receive_IT(&huart3, &rx, 1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4905      	ldr	r1, [pc, #20]	; (8000b58 <HAL_UART_RxCpltCallback+0x8c>)
 8000b42:	480a      	ldr	r0, [pc, #40]	; (8000b6c <HAL_UART_RxCpltCallback+0xa0>)
 8000b44:	f002 faa7 	bl	8003096 <HAL_UART_Receive_IT>
		}
	}
}
 8000b48:	e000      	b.n	8000b4c <HAL_UART_RxCpltCallback+0x80>
		if ((rx == '\n') && (rx_buf[bufindex - 1] == '>') && (rx_buf[0] == '<')) {
 8000b4a:	bf00      	nop
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40004800 	.word	0x40004800
 8000b58:	2000011c 	.word	0x2000011c
 8000b5c:	20000118 	.word	0x20000118
 8000b60:	20000104 	.word	0x20000104
 8000b64:	08004968 	.word	0x08004968
 8000b68:	20000120 	.word	0x20000120
 8000b6c:	20000148 	.word	0x20000148

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_RTC_Init+0x44>)
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <MX_RTC_Init+0x48>)
 8000b84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_RTC_Init+0x44>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_RTC_Init+0x44>)
 8000b8e:	227f      	movs	r2, #127	; 0x7f
 8000b90:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_RTC_Init+0x44>)
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_RTC_Init+0x44>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_RTC_Init+0x44>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_RTC_Init+0x44>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_RTC_Init+0x44>)
 8000bac:	f002 f89a 	bl	8002ce4 <HAL_RTC_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000bb6:	f7ff ffdb 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000124 	.word	0x20000124
 8000bc4:	40002800 	.word	0x40002800

08000bc8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08e      	sub	sp, #56	; 0x38
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	2230      	movs	r2, #48	; 0x30
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fa1f 	bl	800401c <memset>
  if(rtcHandle->Instance==RTC)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <HAL_RTC_MspInit+0x4c>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d111      	bne.n	8000c0c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000be8:	2320      	movs	r3, #32
 8000bea:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 feb4 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000c02:	f7ff ffb5 	bl	8000b70 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <HAL_RTC_MspInit+0x50>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3738      	adds	r7, #56	; 0x38
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40002800 	.word	0x40002800
 8000c18:	42470e3c 	.word	0x42470e3c

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 f95a 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f001 f98d 	bl	8001fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000cd2:	2008      	movs	r0, #8
 8000cd4:	f001 f986 	bl	8001fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <ADC_IRQHandler+0x10>)
 8000ce2:	f000 faab 	bl	800123c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2000008c 	.word	0x2000008c

08000cf0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <USART3_IRQHandler+0x10>)
 8000cf6:	f002 f9ff 	bl	80030f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000148 	.word	0x20000148

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f003 f948 	bl	8003fc8 <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20030000 	.word	0x20030000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	20000144 	.word	0x20000144
 8000d6c:	200001a0 	.word	0x200001a0

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_USART3_UART_Init+0x4c>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <MX_USART3_UART_Init+0x50>)
 8000d9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <MX_USART3_UART_Init+0x4c>)
 8000da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_USART3_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_USART3_UART_Init+0x4c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_USART3_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_USART3_UART_Init+0x4c>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_USART3_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_USART3_UART_Init+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_USART3_UART_Init+0x4c>)
 8000dcc:	f002 f884 	bl	8002ed8 <HAL_UART_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000dd6:	f7ff fecb 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000148 	.word	0x20000148
 8000de4:	40004800 	.word	0x40004800

08000de8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <HAL_UART_MspInit+0x84>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12c      	bne.n	8000e64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_UART_MspInit+0x88>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_UART_MspInit+0x88>)
 8000e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_UART_MspInit+0x88>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_UART_MspInit+0x88>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <HAL_UART_MspInit+0x88>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_UART_MspInit+0x88>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e54:	2307      	movs	r3, #7
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <HAL_UART_MspInit+0x8c>)
 8000e60:	f000 fefa 	bl	8001c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40004800 	.word	0x40004800
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020c00 	.word	0x40020c00

08000e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7e:	490e      	ldr	r1, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e80:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e94:	4c0b      	ldr	r4, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ea2:	f7ff ff65 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f003 f895 	bl	8003fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eaa:	f7ff fc77 	bl	800079c <main>
  bx  lr    
 8000eae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000eb0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ebc:	080049d4 	.word	0x080049d4
  ldr r2, =_sbss
 8000ec0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ec4:	200001a0 	.word	0x200001a0

08000ec8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <CAN1_RX0_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <HAL_Init+0x40>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_Init+0x40>)
 8000ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_Init+0x40>)
 8000eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 fddb 	bl	8001ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	200f      	movs	r0, #15
 8000efc:	f000 f808 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f00:	f7ff fe8c 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023c00 	.word	0x40023c00

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x58>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fdf3 	bl	8001b1a <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00e      	b.n	8000f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d80a      	bhi.n	8000f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f000 fdbb 	bl	8001ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_InitTick+0x5c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000004 	.word	0x20000004

08000f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008
 8000f94:	2000018c 	.word	0x2000018c

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2000018c 	.word	0x2000018c

08000fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff ffee 	bl	8000f98 <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc8:	d005      	beq.n	8000fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_Delay+0x44>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd6:	bf00      	nop
 8000fd8:	f7ff ffde 	bl	8000f98 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d8f7      	bhi.n	8000fd8 <HAL_Delay+0x28>
  {
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e033      	b.n	8001076 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	2b00      	cmp	r3, #0
 8001014:	d109      	bne.n	800102a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff fb0e 	bl	8000638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	2b00      	cmp	r3, #0
 8001034:	d118      	bne.n	8001068 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800103e:	f023 0302 	bic.w	r3, r3, #2
 8001042:	f043 0202 	orr.w	r2, r3, #2
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 fb5a 	bl	8001704 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f023 0303 	bic.w	r3, r3, #3
 800105e:	f043 0201 	orr.w	r2, r3, #1
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
 8001066:	e001      	b.n	800106c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001092:	2b01      	cmp	r3, #1
 8001094:	d101      	bne.n	800109a <HAL_ADC_Start_IT+0x1a>
 8001096:	2302      	movs	r3, #2
 8001098:	e0bd      	b.n	8001216 <HAL_ADC_Start_IT+0x196>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d018      	beq.n	80010e2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0201 	orr.w	r2, r2, #1
 80010be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010c0:	4b58      	ldr	r3, [pc, #352]	; (8001224 <HAL_ADC_Start_IT+0x1a4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a58      	ldr	r2, [pc, #352]	; (8001228 <HAL_ADC_Start_IT+0x1a8>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0c9a      	lsrs	r2, r3, #18
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010d4:	e002      	b.n	80010dc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	3b01      	subs	r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f9      	bne.n	80010d6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	f040 8085 	bne.w	80011fc <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010fa:	f023 0301 	bic.w	r3, r3, #1
 80010fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800111c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800112c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001130:	d106      	bne.n	8001140 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f023 0206 	bic.w	r2, r3, #6
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	645a      	str	r2, [r3, #68]	; 0x44
 800113e:	e002      	b.n	8001146 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800114e:	4b37      	ldr	r3, [pc, #220]	; (800122c <HAL_ADC_Start_IT+0x1ac>)
 8001150:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800115a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6812      	ldr	r2, [r2, #0]
 8001166:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800116a:	f043 0320 	orr.w	r3, r3, #32
 800116e:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 031f 	and.w	r3, r3, #31
 8001178:	2b00      	cmp	r3, #0
 800117a:	d12a      	bne.n	80011d2 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a2b      	ldr	r2, [pc, #172]	; (8001230 <HAL_ADC_Start_IT+0x1b0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d015      	beq.n	80011b2 <HAL_ADC_Start_IT+0x132>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a2a      	ldr	r2, [pc, #168]	; (8001234 <HAL_ADC_Start_IT+0x1b4>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d105      	bne.n	800119c <HAL_ADC_Start_IT+0x11c>
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <HAL_ADC_Start_IT+0x1ac>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 031f 	and.w	r3, r3, #31
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00a      	beq.n	80011b2 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a25      	ldr	r2, [pc, #148]	; (8001238 <HAL_ADC_Start_IT+0x1b8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d136      	bne.n	8001214 <HAL_ADC_Start_IT+0x194>
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <HAL_ADC_Start_IT+0x1ac>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d130      	bne.n	8001214 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d129      	bne.n	8001214 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	e020      	b.n	8001214 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a16      	ldr	r2, [pc, #88]	; (8001230 <HAL_ADC_Start_IT+0x1b0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d11b      	bne.n	8001214 <HAL_ADC_Start_IT+0x194>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d114      	bne.n	8001214 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	e00b      	b.n	8001214 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	f043 0210 	orr.w	r2, r3, #16
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	f043 0201 	orr.w	r2, r3, #1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000000 	.word	0x20000000
 8001228:	431bde83 	.word	0x431bde83
 800122c:	40012300 	.word	0x40012300
 8001230:	40012000 	.word	0x40012000
 8001234:	40012100 	.word	0x40012100
 8001238:	40012200 	.word	0x40012200

0800123c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	f003 0320 	and.w	r3, r3, #32
 800126a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d049      	beq.n	8001306 <HAL_ADC_IRQHandler+0xca>
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d046      	beq.n	8001306 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	2b00      	cmp	r3, #0
 8001282:	d105      	bne.n	8001290 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d12b      	bne.n	80012f6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d127      	bne.n	80012f6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d119      	bne.n	80012f6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0220 	bic.w	r2, r2, #32
 80012d0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d105      	bne.n	80012f6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fb5c 	bl	80009b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f06f 0212 	mvn.w	r2, #18
 8001304:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001314:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d057      	beq.n	80013cc <HAL_ADC_IRQHandler+0x190>
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d054      	beq.n	80013cc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	2b00      	cmp	r3, #0
 800132c:	d105      	bne.n	800133a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d139      	bne.n	80013bc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001352:	2b00      	cmp	r3, #0
 8001354:	d006      	beq.n	8001364 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001360:	2b00      	cmp	r3, #0
 8001362:	d12b      	bne.n	80013bc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800136e:	2b00      	cmp	r3, #0
 8001370:	d124      	bne.n	80013bc <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800137c:	2b00      	cmp	r3, #0
 800137e:	d11d      	bne.n	80013bc <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001384:	2b00      	cmp	r3, #0
 8001386:	d119      	bne.n	80013bc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001396:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d105      	bne.n	80013bc <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f043 0201 	orr.w	r2, r3, #1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 fa9d 	bl	80018fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f06f 020c 	mvn.w	r2, #12
 80013ca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013da:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d017      	beq.n	8001412 <HAL_ADC_IRQHandler+0x1d6>
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d014      	beq.n	8001412 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d10d      	bne.n	8001412 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f837 	bl	8001476 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f06f 0201 	mvn.w	r2, #1
 8001410:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001420:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d015      	beq.n	8001454 <HAL_ADC_IRQHandler+0x218>
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d012      	beq.n	8001454 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f043 0202 	orr.w	r2, r3, #2
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f06f 0220 	mvn.w	r2, #32
 8001442:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f820 	bl	800148a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f06f 0220 	mvn.w	r2, #32
 8001452:	601a      	str	r2, [r3, #0]
  }
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1c>
 80014b8:	2302      	movs	r3, #2
 80014ba:	e113      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x244>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	d925      	bls.n	8001518 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68d9      	ldr	r1, [r3, #12]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	3b1e      	subs	r3, #30
 80014e2:	2207      	movs	r2, #7
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43da      	mvns	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	400a      	ands	r2, r1
 80014f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68d9      	ldr	r1, [r3, #12]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	4603      	mov	r3, r0
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4403      	add	r3, r0
 800150a:	3b1e      	subs	r3, #30
 800150c:	409a      	lsls	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	e022      	b.n	800155e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6919      	ldr	r1, [r3, #16]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	2207      	movs	r2, #7
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	400a      	ands	r2, r1
 800153a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6919      	ldr	r1, [r3, #16]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	4603      	mov	r3, r0
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4403      	add	r3, r0
 8001554:	409a      	lsls	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b06      	cmp	r3, #6
 8001564:	d824      	bhi.n	80015b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3b05      	subs	r3, #5
 8001578:	221f      	movs	r2, #31
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	400a      	ands	r2, r1
 8001586:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	b29b      	uxth	r3, r3
 8001594:	4618      	mov	r0, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	3b05      	subs	r3, #5
 80015a2:	fa00 f203 	lsl.w	r2, r0, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	635a      	str	r2, [r3, #52]	; 0x34
 80015ae:	e04c      	b.n	800164a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b0c      	cmp	r3, #12
 80015b6:	d824      	bhi.n	8001602 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	3b23      	subs	r3, #35	; 0x23
 80015ca:	221f      	movs	r2, #31
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43da      	mvns	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	400a      	ands	r2, r1
 80015d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	3b23      	subs	r3, #35	; 0x23
 80015f4:	fa00 f203 	lsl.w	r2, r0, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001600:	e023      	b.n	800164a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3b41      	subs	r3, #65	; 0x41
 8001614:	221f      	movs	r2, #31
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	400a      	ands	r2, r1
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	3b41      	subs	r3, #65	; 0x41
 800163e:	fa00 f203 	lsl.w	r2, r0, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <HAL_ADC_ConfigChannel+0x250>)
 800164c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a28      	ldr	r2, [pc, #160]	; (80016f4 <HAL_ADC_ConfigChannel+0x254>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d10f      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x1d8>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b12      	cmp	r3, #18
 800165e:	d10b      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_ADC_ConfigChannel+0x254>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d12b      	bne.n	80016da <HAL_ADC_ConfigChannel+0x23a>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <HAL_ADC_ConfigChannel+0x258>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d003      	beq.n	8001694 <HAL_ADC_ConfigChannel+0x1f4>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b11      	cmp	r3, #17
 8001692:	d122      	bne.n	80016da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a11      	ldr	r2, [pc, #68]	; (80016f8 <HAL_ADC_ConfigChannel+0x258>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d111      	bne.n	80016da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_ADC_ConfigChannel+0x25c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_ADC_ConfigChannel+0x260>)
 80016bc:	fba2 2303 	umull	r2, r3, r2, r3
 80016c0:	0c9a      	lsrs	r2, r3, #18
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016cc:	e002      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f9      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	40012300 	.word	0x40012300
 80016f4:	40012000 	.word	0x40012000
 80016f8:	10000012 	.word	0x10000012
 80016fc:	20000000 	.word	0x20000000
 8001700:	431bde83 	.word	0x431bde83

08001704 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800170c:	4b79      	ldr	r3, [pc, #484]	; (80018f4 <ADC_Init+0x1f0>)
 800170e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	431a      	orrs	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001738:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	021a      	lsls	r2, r3, #8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800175c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800177e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6899      	ldr	r1, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <ADC_Init+0x1f4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d022      	beq.n	80017e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6899      	ldr	r1, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	e00f      	b.n	8001802 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001800:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0202 	bic.w	r2, r2, #2
 8001810:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6899      	ldr	r1, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7e1b      	ldrb	r3, [r3, #24]
 800181c:	005a      	lsls	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d01b      	beq.n	8001868 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800183e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800184e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6859      	ldr	r1, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	3b01      	subs	r3, #1
 800185c:	035a      	lsls	r2, r3, #13
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	e007      	b.n	8001878 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001876:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	3b01      	subs	r3, #1
 8001894:	051a      	lsls	r2, r3, #20
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6899      	ldr	r1, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ba:	025a      	lsls	r2, r3, #9
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6899      	ldr	r1, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	029a      	lsls	r2, r3, #10
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	609a      	str	r2, [r3, #8]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40012300 	.word	0x40012300
 80018f8:	0f000001 	.word	0x0f000001

080018fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0b      	blt.n	800199e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4907      	ldr	r1, [pc, #28]	; (80019ac <__NVIC_EnableIRQ+0x38>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	; (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	; (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a7c:	d301      	bcc.n	8001a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00f      	b.n	8001aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <SysTick_Config+0x40>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f7ff ff8e 	bl	80019b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <SysTick_Config+0x40>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <SysTick_Config+0x40>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff29 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad8:	f7ff ff3e 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff ff8e 	bl	8001a04 <NVIC_EncodePriority>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff5d 	bl	80019b0 <__NVIC_SetPriority>
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff31 	bl	8001974 <__NVIC_EnableIRQ>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffa2 	bl	8001a6c <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff fa2a 	bl	8000f98 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d008      	beq.n	8001b64 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e052      	b.n	8001c0a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0216 	bic.w	r2, r2, #22
 8001b72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	695a      	ldr	r2, [r3, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b82:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d103      	bne.n	8001b94 <HAL_DMA_Abort+0x62>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0208 	bic.w	r2, r2, #8
 8001ba2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb4:	e013      	b.n	8001bde <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bb6:	f7ff f9ef 	bl	8000f98 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d90c      	bls.n	8001bde <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2203      	movs	r2, #3
 8001bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e015      	b.n	8001c0a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1e4      	bne.n	8001bb6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	223f      	movs	r2, #63	; 0x3f
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d004      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e00c      	b.n	8001c4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2205      	movs	r2, #5
 8001c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	e177      	b.n	8001f64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c74:	2201      	movs	r2, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	f040 8166 	bne.w	8001f5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d005      	beq.n	8001caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d130      	bne.n	8001d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 0201 	and.w	r2, r3, #1
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d017      	beq.n	8001d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	2203      	movs	r2, #3
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d123      	bne.n	8001d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	08da      	lsrs	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3208      	adds	r2, #8
 8001d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	69b9      	ldr	r1, [r7, #24]
 8001d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0203 	and.w	r2, r3, #3
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 80c0 	beq.w	8001f5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b66      	ldr	r3, [pc, #408]	; (8001f7c <HAL_GPIO_Init+0x324>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a65      	ldr	r2, [pc, #404]	; (8001f7c <HAL_GPIO_Init+0x324>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b63      	ldr	r3, [pc, #396]	; (8001f7c <HAL_GPIO_Init+0x324>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dfa:	4a61      	ldr	r2, [pc, #388]	; (8001f80 <HAL_GPIO_Init+0x328>)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	3302      	adds	r3, #2
 8001e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	220f      	movs	r2, #15
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a58      	ldr	r2, [pc, #352]	; (8001f84 <HAL_GPIO_Init+0x32c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d037      	beq.n	8001e96 <HAL_GPIO_Init+0x23e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a57      	ldr	r2, [pc, #348]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d031      	beq.n	8001e92 <HAL_GPIO_Init+0x23a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a56      	ldr	r2, [pc, #344]	; (8001f8c <HAL_GPIO_Init+0x334>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d02b      	beq.n	8001e8e <HAL_GPIO_Init+0x236>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a55      	ldr	r2, [pc, #340]	; (8001f90 <HAL_GPIO_Init+0x338>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d025      	beq.n	8001e8a <HAL_GPIO_Init+0x232>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a54      	ldr	r2, [pc, #336]	; (8001f94 <HAL_GPIO_Init+0x33c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d01f      	beq.n	8001e86 <HAL_GPIO_Init+0x22e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a53      	ldr	r2, [pc, #332]	; (8001f98 <HAL_GPIO_Init+0x340>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d019      	beq.n	8001e82 <HAL_GPIO_Init+0x22a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a52      	ldr	r2, [pc, #328]	; (8001f9c <HAL_GPIO_Init+0x344>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d013      	beq.n	8001e7e <HAL_GPIO_Init+0x226>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a51      	ldr	r2, [pc, #324]	; (8001fa0 <HAL_GPIO_Init+0x348>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00d      	beq.n	8001e7a <HAL_GPIO_Init+0x222>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a50      	ldr	r2, [pc, #320]	; (8001fa4 <HAL_GPIO_Init+0x34c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d007      	beq.n	8001e76 <HAL_GPIO_Init+0x21e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4f      	ldr	r2, [pc, #316]	; (8001fa8 <HAL_GPIO_Init+0x350>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d101      	bne.n	8001e72 <HAL_GPIO_Init+0x21a>
 8001e6e:	2309      	movs	r3, #9
 8001e70:	e012      	b.n	8001e98 <HAL_GPIO_Init+0x240>
 8001e72:	230a      	movs	r3, #10
 8001e74:	e010      	b.n	8001e98 <HAL_GPIO_Init+0x240>
 8001e76:	2308      	movs	r3, #8
 8001e78:	e00e      	b.n	8001e98 <HAL_GPIO_Init+0x240>
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	e00c      	b.n	8001e98 <HAL_GPIO_Init+0x240>
 8001e7e:	2306      	movs	r3, #6
 8001e80:	e00a      	b.n	8001e98 <HAL_GPIO_Init+0x240>
 8001e82:	2305      	movs	r3, #5
 8001e84:	e008      	b.n	8001e98 <HAL_GPIO_Init+0x240>
 8001e86:	2304      	movs	r3, #4
 8001e88:	e006      	b.n	8001e98 <HAL_GPIO_Init+0x240>
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e004      	b.n	8001e98 <HAL_GPIO_Init+0x240>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_Init+0x240>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_GPIO_Init+0x240>
 8001e96:	2300      	movs	r3, #0
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	f002 0203 	and.w	r2, r2, #3
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	4093      	lsls	r3, r2
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea8:	4935      	ldr	r1, [pc, #212]	; (8001f80 <HAL_GPIO_Init+0x328>)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb6:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <HAL_GPIO_Init+0x354>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eda:	4a34      	ldr	r2, [pc, #208]	; (8001fac <HAL_GPIO_Init+0x354>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee0:	4b32      	ldr	r3, [pc, #200]	; (8001fac <HAL_GPIO_Init+0x354>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f04:	4a29      	ldr	r2, [pc, #164]	; (8001fac <HAL_GPIO_Init+0x354>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f0a:	4b28      	ldr	r3, [pc, #160]	; (8001fac <HAL_GPIO_Init+0x354>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f2e:	4a1f      	ldr	r2, [pc, #124]	; (8001fac <HAL_GPIO_Init+0x354>)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_GPIO_Init+0x354>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f58:	4a14      	ldr	r2, [pc, #80]	; (8001fac <HAL_GPIO_Init+0x354>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3301      	adds	r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	f67f ae84 	bls.w	8001c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40013800 	.word	0x40013800
 8001f84:	40020000 	.word	0x40020000
 8001f88:	40020400 	.word	0x40020400
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40020c00 	.word	0x40020c00
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40021400 	.word	0x40021400
 8001f9c:	40021800 	.word	0x40021800
 8001fa0:	40021c00 	.word	0x40021c00
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	40022400 	.word	0x40022400
 8001fac:	40013c00 	.word	0x40013c00

08001fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fcc:	e003      	b.n	8001fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fce:	887b      	ldrh	r3, [r7, #2]
 8001fd0:	041a      	lsls	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	619a      	str	r2, [r3, #24]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fcf0 	bl	80009e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40013c00 	.word	0x40013c00

08002014 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002040:	f7fe ffaa 	bl	8000f98 <HAL_GetTick>
 8002044:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002046:	e009      	b.n	800205c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002048:	f7fe ffa6 	bl	8000f98 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002056:	d901      	bls.n	800205c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e01f      	b.n	800209c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <HAL_PWREx_EnableOverDrive+0x98>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002068:	d1ee      	bne.n	8002048 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002070:	f7fe ff92 	bl	8000f98 <HAL_GetTick>
 8002074:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002076:	e009      	b.n	800208c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002078:	f7fe ff8e 	bl	8000f98 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002086:	d901      	bls.n	800208c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e007      	b.n	800209c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <HAL_PWREx_EnableOverDrive+0x98>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002098:	d1ee      	bne.n	8002078 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40023800 	.word	0x40023800
 80020a8:	420e0040 	.word	0x420e0040
 80020ac:	40007000 	.word	0x40007000
 80020b0:	420e0044 	.word	0x420e0044

080020b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e267      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d075      	beq.n	80021be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020d2:	4b88      	ldr	r3, [pc, #544]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d00c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020de:	4b85      	ldr	r3, [pc, #532]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d112      	bne.n	8002110 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ea:	4b82      	ldr	r3, [pc, #520]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020f6:	d10b      	bne.n	8002110 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	4b7e      	ldr	r3, [pc, #504]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d05b      	beq.n	80021bc <HAL_RCC_OscConfig+0x108>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d157      	bne.n	80021bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e242      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002118:	d106      	bne.n	8002128 <HAL_RCC_OscConfig+0x74>
 800211a:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a75      	ldr	r2, [pc, #468]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e01d      	b.n	8002164 <HAL_RCC_OscConfig+0xb0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x98>
 8002132:	4b70      	ldr	r3, [pc, #448]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a6f      	ldr	r2, [pc, #444]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6c      	ldr	r2, [pc, #432]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0xb0>
 800214c:	4b69      	ldr	r3, [pc, #420]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a68      	ldr	r2, [pc, #416]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b66      	ldr	r3, [pc, #408]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a65      	ldr	r2, [pc, #404]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 800215e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7fe ff14 	bl	8000f98 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002174:	f7fe ff10 	bl	8000f98 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e207      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	4b5b      	ldr	r3, [pc, #364]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0xc0>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7fe ff00 	bl	8000f98 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800219c:	f7fe fefc 	bl	8000f98 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1f3      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	4b51      	ldr	r3, [pc, #324]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0xe8>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d063      	beq.n	8002292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ca:	4b4a      	ldr	r3, [pc, #296]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d11c      	bne.n	800221c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e2:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d116      	bne.n	800221c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_RCC_OscConfig+0x152>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e1c7      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002206:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4937      	ldr	r1, [pc, #220]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	e03a      	b.n	8002292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002224:	4b34      	ldr	r3, [pc, #208]	; (80022f8 <HAL_RCC_OscConfig+0x244>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7fe feb5 	bl	8000f98 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002232:	f7fe feb1 	bl	8000f98 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1a8      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4925      	ldr	r1, [pc, #148]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]
 8002264:	e015      	b.n	8002292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002266:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <HAL_RCC_OscConfig+0x244>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7fe fe94 	bl	8000f98 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002274:	f7fe fe90 	bl	8000f98 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e187      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d036      	beq.n	800230c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d016      	beq.n	80022d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_RCC_OscConfig+0x248>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ac:	f7fe fe74 	bl	8000f98 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b4:	f7fe fe70 	bl	8000f98 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e167      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_OscConfig+0x240>)
 80022c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x200>
 80022d2:	e01b      	b.n	800230c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_RCC_OscConfig+0x248>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022da:	f7fe fe5d 	bl	8000f98 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e0:	e00e      	b.n	8002300 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e2:	f7fe fe59 	bl	8000f98 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d907      	bls.n	8002300 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e150      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
 80022f4:	40023800 	.word	0x40023800
 80022f8:	42470000 	.word	0x42470000
 80022fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002300:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ea      	bne.n	80022e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8097 	beq.w	8002448 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231e:	4b81      	ldr	r3, [pc, #516]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10f      	bne.n	800234a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	4b7d      	ldr	r3, [pc, #500]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a7c      	ldr	r2, [pc, #496]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b7a      	ldr	r3, [pc, #488]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002346:	2301      	movs	r3, #1
 8002348:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	4b77      	ldr	r3, [pc, #476]	; (8002528 <HAL_RCC_OscConfig+0x474>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d118      	bne.n	8002388 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002356:	4b74      	ldr	r3, [pc, #464]	; (8002528 <HAL_RCC_OscConfig+0x474>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a73      	ldr	r2, [pc, #460]	; (8002528 <HAL_RCC_OscConfig+0x474>)
 800235c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002362:	f7fe fe19 	bl	8000f98 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236a:	f7fe fe15 	bl	8000f98 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e10c      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_RCC_OscConfig+0x474>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x2ea>
 8002390:	4b64      	ldr	r3, [pc, #400]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	4a63      	ldr	r2, [pc, #396]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6713      	str	r3, [r2, #112]	; 0x70
 800239c:	e01c      	b.n	80023d8 <HAL_RCC_OscConfig+0x324>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b05      	cmp	r3, #5
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x30c>
 80023a6:	4b5f      	ldr	r3, [pc, #380]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	4a5e      	ldr	r2, [pc, #376]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	6713      	str	r3, [r2, #112]	; 0x70
 80023b2:	4b5c      	ldr	r3, [pc, #368]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	4a5b      	ldr	r2, [pc, #364]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6713      	str	r3, [r2, #112]	; 0x70
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0x324>
 80023c0:	4b58      	ldr	r3, [pc, #352]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	4a57      	ldr	r2, [pc, #348]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	6713      	str	r3, [r2, #112]	; 0x70
 80023cc:	4b55      	ldr	r3, [pc, #340]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	4a54      	ldr	r2, [pc, #336]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80023d2:	f023 0304 	bic.w	r3, r3, #4
 80023d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d015      	beq.n	800240c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7fe fdda 	bl	8000f98 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e8:	f7fe fdd6 	bl	8000f98 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e0cb      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fe:	4b49      	ldr	r3, [pc, #292]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0ee      	beq.n	80023e8 <HAL_RCC_OscConfig+0x334>
 800240a:	e014      	b.n	8002436 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7fe fdc4 	bl	8000f98 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002412:	e00a      	b.n	800242a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe fdc0 	bl	8000f98 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e0b5      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242a:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ee      	bne.n	8002414 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002436:	7dfb      	ldrb	r3, [r7, #23]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4b39      	ldr	r3, [pc, #228]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	4a38      	ldr	r2, [pc, #224]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002446:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80a1 	beq.w	8002594 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002452:	4b34      	ldr	r3, [pc, #208]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b08      	cmp	r3, #8
 800245c:	d05c      	beq.n	8002518 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d141      	bne.n	80024ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002466:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_RCC_OscConfig+0x478>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7fe fd94 	bl	8000f98 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe fd90 	bl	8000f98 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e087      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002486:	4b27      	ldr	r3, [pc, #156]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	019b      	lsls	r3, r3, #6
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	3b01      	subs	r3, #1
 80024ac:	041b      	lsls	r3, r3, #16
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	061b      	lsls	r3, r3, #24
 80024b6:	491b      	ldr	r1, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x478>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7fe fd69 	bl	8000f98 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ca:	f7fe fd65 	bl	8000f98 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e05c      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x416>
 80024e8:	e054      	b.n	8002594 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_RCC_OscConfig+0x478>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd52 	bl	8000f98 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f8:	f7fe fd4e 	bl	8000f98 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e045      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_RCC_OscConfig+0x470>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x444>
 8002516:	e03d      	b.n	8002594 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d107      	bne.n	8002530 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e038      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
 8002524:	40023800 	.word	0x40023800
 8002528:	40007000 	.word	0x40007000
 800252c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_RCC_OscConfig+0x4ec>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d028      	beq.n	8002590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d121      	bne.n	8002590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d11a      	bne.n	8002590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002560:	4013      	ands	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002566:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002568:	4293      	cmp	r3, r2
 800256a:	d111      	bne.n	8002590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d107      	bne.n	8002590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800

080025a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0cc      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b68      	ldr	r3, [pc, #416]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d90c      	bls.n	80025e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b65      	ldr	r3, [pc, #404]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b63      	ldr	r3, [pc, #396]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0b8      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d020      	beq.n	800262e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f8:	4b59      	ldr	r3, [pc, #356]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a58      	ldr	r2, [pc, #352]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002602:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002610:	4b53      	ldr	r3, [pc, #332]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a52      	ldr	r2, [pc, #328]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800261a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261c:	4b50      	ldr	r3, [pc, #320]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	494d      	ldr	r1, [pc, #308]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d044      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b47      	ldr	r3, [pc, #284]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d119      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e07f      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d003      	beq.n	8002662 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800265e:	2b03      	cmp	r3, #3
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06f      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e067      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002682:	4b37      	ldr	r3, [pc, #220]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f023 0203 	bic.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4934      	ldr	r1, [pc, #208]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	4313      	orrs	r3, r2
 8002692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002694:	f7fe fc80 	bl	8000f98 <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269c:	f7fe fc7c 	bl	8000f98 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e04f      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 020c 	and.w	r2, r3, #12
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1eb      	bne.n	800269c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b25      	ldr	r3, [pc, #148]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d20c      	bcs.n	80026ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b22      	ldr	r3, [pc, #136]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e032      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4916      	ldr	r1, [pc, #88]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	490e      	ldr	r1, [pc, #56]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800272a:	f000 f821 	bl	8002770 <HAL_RCC_GetSysClockFreq>
 800272e:	4602      	mov	r2, r0
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	490a      	ldr	r1, [pc, #40]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	5ccb      	ldrb	r3, [r1, r3]
 800273e:	fa22 f303 	lsr.w	r3, r2, r3
 8002742:	4a09      	ldr	r2, [pc, #36]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fbe0 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023c00 	.word	0x40023c00
 8002760:	40023800 	.word	0x40023800
 8002764:	08004978 	.word	0x08004978
 8002768:	20000000 	.word	0x20000000
 800276c:	20000004 	.word	0x20000004

08002770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002774:	b090      	sub	sp, #64	; 0x40
 8002776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	637b      	str	r3, [r7, #52]	; 0x34
 800277c:	2300      	movs	r3, #0
 800277e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002780:	2300      	movs	r3, #0
 8002782:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002788:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b08      	cmp	r3, #8
 8002792:	d00d      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x40>
 8002794:	2b08      	cmp	r3, #8
 8002796:	f200 80a1 	bhi.w	80028dc <HAL_RCC_GetSysClockFreq+0x16c>
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x34>
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d003      	beq.n	80027aa <HAL_RCC_GetSysClockFreq+0x3a>
 80027a2:	e09b      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027a4:	4b53      	ldr	r3, [pc, #332]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80027a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027a8:	e09b      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027aa:	4b53      	ldr	r3, [pc, #332]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80027ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027ae:	e098      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027b0:	4b4f      	ldr	r3, [pc, #316]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ba:	4b4d      	ldr	r3, [pc, #308]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d028      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c6:	4b4a      	ldr	r3, [pc, #296]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	099b      	lsrs	r3, r3, #6
 80027cc:	2200      	movs	r2, #0
 80027ce:	623b      	str	r3, [r7, #32]
 80027d0:	627a      	str	r2, [r7, #36]	; 0x24
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027d8:	2100      	movs	r1, #0
 80027da:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80027dc:	fb03 f201 	mul.w	r2, r3, r1
 80027e0:	2300      	movs	r3, #0
 80027e2:	fb00 f303 	mul.w	r3, r0, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	4a43      	ldr	r2, [pc, #268]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80027ea:	fba0 1202 	umull	r1, r2, r0, r2
 80027ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027f0:	460a      	mov	r2, r1
 80027f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80027f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f6:	4413      	add	r3, r2
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fc:	2200      	movs	r2, #0
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	61fa      	str	r2, [r7, #28]
 8002802:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002806:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800280a:	f7fd fd41 	bl	8000290 <__aeabi_uldivmod>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4613      	mov	r3, r2
 8002814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002816:	e053      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002818:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	099b      	lsrs	r3, r3, #6
 800281e:	2200      	movs	r2, #0
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	617a      	str	r2, [r7, #20]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800282a:	f04f 0b00 	mov.w	fp, #0
 800282e:	4652      	mov	r2, sl
 8002830:	465b      	mov	r3, fp
 8002832:	f04f 0000 	mov.w	r0, #0
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	0159      	lsls	r1, r3, #5
 800283c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002840:	0150      	lsls	r0, r2, #5
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	ebb2 080a 	subs.w	r8, r2, sl
 800284a:	eb63 090b 	sbc.w	r9, r3, fp
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800285a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800285e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002862:	ebb2 0408 	subs.w	r4, r2, r8
 8002866:	eb63 0509 	sbc.w	r5, r3, r9
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	00eb      	lsls	r3, r5, #3
 8002874:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002878:	00e2      	lsls	r2, r4, #3
 800287a:	4614      	mov	r4, r2
 800287c:	461d      	mov	r5, r3
 800287e:	eb14 030a 	adds.w	r3, r4, sl
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	eb45 030b 	adc.w	r3, r5, fp
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002896:	4629      	mov	r1, r5
 8002898:	028b      	lsls	r3, r1, #10
 800289a:	4621      	mov	r1, r4
 800289c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a0:	4621      	mov	r1, r4
 80028a2:	028a      	lsls	r2, r1, #10
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028aa:	2200      	movs	r2, #0
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	60fa      	str	r2, [r7, #12]
 80028b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028b4:	f7fd fcec 	bl	8000290 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4613      	mov	r3, r2
 80028be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	3301      	adds	r3, #1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028da:	e002      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80028de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3740      	adds	r7, #64	; 0x40
 80028e8:	46bd      	mov	sp, r7
 80028ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	00f42400 	.word	0x00f42400
 80028f8:	017d7840 	.word	0x017d7840

080028fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <HAL_RCC_GetHCLKFreq+0x14>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000000 	.word	0x20000000

08002914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002918:	f7ff fff0 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0a9b      	lsrs	r3, r3, #10
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4903      	ldr	r1, [pc, #12]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40023800 	.word	0x40023800
 8002938:	08004988 	.word	0x08004988

0800293c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002940:	f7ff ffdc 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	0b5b      	lsrs	r3, r3, #13
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4903      	ldr	r1, [pc, #12]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40023800 	.word	0x40023800
 8002960:	08004988 	.word	0x08004988

08002964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10b      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002994:	2b00      	cmp	r3, #0
 8002996:	d075      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002998:	4b91      	ldr	r3, [pc, #580]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800299e:	f7fe fafb 	bl	8000f98 <HAL_GetTick>
 80029a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029a6:	f7fe faf7 	bl	8000f98 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e189      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029b8:	4b8a      	ldr	r3, [pc, #552]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	019a      	lsls	r2, r3, #6
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	071b      	lsls	r3, r3, #28
 80029dc:	4981      	ldr	r1, [pc, #516]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01f      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029f0:	4b7c      	ldr	r3, [pc, #496]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f6:	0f1b      	lsrs	r3, r3, #28
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	019a      	lsls	r2, r3, #6
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	071b      	lsls	r3, r3, #28
 8002a10:	4974      	ldr	r1, [pc, #464]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a18:	4b72      	ldr	r3, [pc, #456]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1e:	f023 021f 	bic.w	r2, r3, #31
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	496e      	ldr	r1, [pc, #440]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	019a      	lsls	r2, r3, #6
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	061b      	lsls	r3, r3, #24
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	071b      	lsls	r3, r3, #28
 8002a50:	4964      	ldr	r1, [pc, #400]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a58:	4b61      	ldr	r3, [pc, #388]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a5e:	f7fe fa9b 	bl	8000f98 <HAL_GetTick>
 8002a62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a66:	f7fe fa97 	bl	8000f98 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e129      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a78:	4b5a      	ldr	r3, [pc, #360]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d079      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a9c:	4b52      	ldr	r3, [pc, #328]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002aa2:	f7fe fa79 	bl	8000f98 <HAL_GetTick>
 8002aa6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002aaa:	f7fe fa75 	bl	8000f98 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e107      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002abc:	4b49      	ldr	r3, [pc, #292]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac8:	d0ef      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d020      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ad6:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	0f1b      	lsrs	r3, r3, #28
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	019a      	lsls	r2, r3, #6
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	061b      	lsls	r3, r3, #24
 8002af0:	431a      	orrs	r2, r3
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	071b      	lsls	r3, r3, #28
 8002af6:	493b      	ldr	r1, [pc, #236]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002afe:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	4934      	ldr	r1, [pc, #208]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01e      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b24:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	0e1b      	lsrs	r3, r3, #24
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	019a      	lsls	r2, r3, #6
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	061b      	lsls	r3, r3, #24
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	071b      	lsls	r3, r3, #28
 8002b44:	4927      	ldr	r1, [pc, #156]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	4922      	ldr	r1, [pc, #136]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b62:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b68:	f7fe fa16 	bl	8000f98 <HAL_GetTick>
 8002b6c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b70:	f7fe fa12 	bl	8000f98 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e0a4      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b82:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b8e:	d1ef      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 808b 	beq.w	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a0f      	ldr	r2, [pc, #60]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a0b      	ldr	r2, [pc, #44]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bc6:	f7fe f9e7 	bl	8000f98 <HAL_GetTick>
 8002bca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002bcc:	e010      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002bce:	f7fe f9e3 	bl	8000f98 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d909      	bls.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e075      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002be0:	42470068 	.word	0x42470068
 8002be4:	40023800 	.word	0x40023800
 8002be8:	42470070 	.word	0x42470070
 8002bec:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002bf0:	4b38      	ldr	r3, [pc, #224]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0e8      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bfc:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c04:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d02f      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d028      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c1a:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2a:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c30:	4a29      	ldr	r2, [pc, #164]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c36:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d114      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c42:	f7fe f9a9 	bl	8000f98 <HAL_GetTick>
 8002c46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c4a:	f7fe f9a5 	bl	8000f98 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e035      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0ee      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c78:	d10d      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002c7a:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8e:	4912      	ldr	r1, [pc, #72]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	608b      	str	r3, [r1, #8]
 8002c94:	e005      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c9c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ca0:	6093      	str	r3, [r2, #8]
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ca4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cae:	490a      	ldr	r1, [pc, #40]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d004      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002cc8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40007000 	.word	0x40007000
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	42470e40 	.word	0x42470e40
 8002ce0:	424711e0 	.word	0x424711e0

08002ce4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e066      	b.n	8002dc8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7f5b      	ldrb	r3, [r3, #29]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fd ff5c 	bl	8000bc8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	22ca      	movs	r2, #202	; 0xca
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2253      	movs	r2, #83	; 0x53
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f87a 	bl	8002e20 <RTC_EnterInitMode>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d12c      	bne.n	8002d90 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d48:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6899      	ldr	r1, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	68d2      	ldr	r2, [r2, #12]
 8002d70:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6919      	ldr	r1, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	041a      	lsls	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f881 	bl	8002e8e <RTC_ExitInitMode>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d113      	bne.n	8002dbe <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699a      	ldr	r2, [r3, #24]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	22ff      	movs	r2, #255	; 0xff
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dec:	f7fe f8d4 	bl	8000f98 <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002df2:	e009      	b.n	8002e08 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002df4:	f7fe f8d0 	bl	8000f98 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e02:	d901      	bls.n	8002e08 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e007      	b.n	8002e18 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0ee      	beq.n	8002df4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d122      	bne.n	8002e84 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e4c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e4e:	f7fe f8a3 	bl	8000f98 <HAL_GetTick>
 8002e52:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e54:	e00c      	b.n	8002e70 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e56:	f7fe f89f 	bl	8000f98 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e64:	d904      	bls.n	8002e70 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <RTC_EnterInitMode+0x64>
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d1e8      	bne.n	8002e56 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ea8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ff89 	bl	8002dd0 <HAL_RTC_WaitForSynchro>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d004      	beq.n	8002ece <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e03f      	b.n	8002f6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fd ff72 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	; 0x24
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fddf 	bl	8003ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b08a      	sub	sp, #40	; 0x28
 8002f76:	af02      	add	r7, sp, #8
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d17c      	bne.n	800308c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_UART_Transmit+0x2c>
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e075      	b.n	800308e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_UART_Transmit+0x3e>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e06e      	b.n	800308e <HAL_UART_Transmit+0x11c>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2221      	movs	r2, #33	; 0x21
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fc6:	f7fd ffe7 	bl	8000f98 <HAL_GetTick>
 8002fca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	88fa      	ldrh	r2, [r7, #6]
 8002fd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	88fa      	ldrh	r2, [r7, #6]
 8002fd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe0:	d108      	bne.n	8002ff4 <HAL_UART_Transmit+0x82>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d104      	bne.n	8002ff4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	e003      	b.n	8002ffc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003004:	e02a      	b.n	800305c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2200      	movs	r2, #0
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fb1f 	bl	8003654 <UART_WaitOnFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e036      	b.n	800308e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10b      	bne.n	800303e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003034:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	3302      	adds	r3, #2
 800303a:	61bb      	str	r3, [r7, #24]
 800303c:	e007      	b.n	800304e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	3301      	adds	r3, #1
 800304c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1cf      	bne.n	8003006 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2200      	movs	r2, #0
 800306e:	2140      	movs	r1, #64	; 0x40
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 faef 	bl	8003654 <UART_WaitOnFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e006      	b.n	800308e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	3720      	adds	r7, #32
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	4613      	mov	r3, r2
 80030a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d11d      	bne.n	80030ec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_UART_Receive_IT+0x26>
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e016      	b.n	80030ee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Receive_IT+0x38>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e00f      	b.n	80030ee <HAL_UART_Receive_IT+0x58>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	461a      	mov	r2, r3
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fb24 	bl	8003730 <UART_Start_Receive_IT>
 80030e8:	4603      	mov	r3, r0
 80030ea:	e000      	b.n	80030ee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80030ec:	2302      	movs	r3, #2
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b0ba      	sub	sp, #232	; 0xe8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003124:	2300      	movs	r3, #0
 8003126:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800312a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10f      	bne.n	800315e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800313e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_UART_IRQHandler+0x66>
 800314a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fc07 	bl	800396a <UART_Receive_IT>
      return;
 800315c:	e256      	b.n	800360c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800315e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80de 	beq.w	8003324 <HAL_UART_IRQHandler+0x22c>
 8003168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003178:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80d1 	beq.w	8003324 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <HAL_UART_IRQHandler+0xae>
 800318e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f043 0201 	orr.w	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00b      	beq.n	80031ca <HAL_UART_IRQHandler+0xd2>
 80031b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f043 0202 	orr.w	r2, r3, #2
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_UART_IRQHandler+0xf6>
 80031d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f043 0204 	orr.w	r2, r3, #4
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d011      	beq.n	800321e <HAL_UART_IRQHandler+0x126>
 80031fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f043 0208 	orr.w	r2, r3, #8
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 81ed 	beq.w	8003602 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_UART_IRQHandler+0x14e>
 8003234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fb92 	bl	800396a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003250:	2b40      	cmp	r3, #64	; 0x40
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_UART_IRQHandler+0x17a>
 800326a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d04f      	beq.n	8003312 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fa9a 	bl	80037ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	d141      	bne.n	800330a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3314      	adds	r3, #20
 800328c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800329c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3314      	adds	r3, #20
 80032ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80032be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032c2:	e841 2300 	strex	r3, r2, [r1]
 80032c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1d9      	bne.n	8003286 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d013      	beq.n	8003302 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	4a7d      	ldr	r2, [pc, #500]	; (80034d4 <HAL_UART_IRQHandler+0x3dc>)
 80032e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe fc93 	bl	8001c12 <HAL_DMA_Abort_IT>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d016      	beq.n	8003320 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032fc:	4610      	mov	r0, r2
 80032fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003300:	e00e      	b.n	8003320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f990 	bl	8003628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003308:	e00a      	b.n	8003320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f98c 	bl	8003628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003310:	e006      	b.n	8003320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f988 	bl	8003628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800331e:	e170      	b.n	8003602 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003320:	bf00      	nop
    return;
 8003322:	e16e      	b.n	8003602 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	2b01      	cmp	r3, #1
 800332a:	f040 814a 	bne.w	80035c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800332e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8143 	beq.w	80035c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800333c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 813c 	beq.w	80035c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b40      	cmp	r3, #64	; 0x40
 800336c:	f040 80b4 	bne.w	80034d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800337c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8140 	beq.w	8003606 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800338a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800338e:	429a      	cmp	r2, r3
 8003390:	f080 8139 	bcs.w	8003606 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800339a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a6:	f000 8088 	beq.w	80034ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	330c      	adds	r3, #12
 80033b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	330c      	adds	r3, #12
 80033d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033e6:	e841 2300 	strex	r3, r2, [r1]
 80033ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1d9      	bne.n	80033aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3314      	adds	r3, #20
 80033fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3314      	adds	r3, #20
 8003416:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800341a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800341e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003422:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800342c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e1      	bne.n	80033f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3314      	adds	r3, #20
 8003438:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3314      	adds	r3, #20
 8003452:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003456:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003458:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800345c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800345e:	e841 2300 	strex	r3, r2, [r1]
 8003462:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1e3      	bne.n	8003432 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	330c      	adds	r3, #12
 800347e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003482:	e853 3f00 	ldrex	r3, [r3]
 8003486:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800348a:	f023 0310 	bic.w	r3, r3, #16
 800348e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	330c      	adds	r3, #12
 8003498:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800349c:	65ba      	str	r2, [r7, #88]	; 0x58
 800349e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034a4:	e841 2300 	strex	r3, r2, [r1]
 80034a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80034aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1e3      	bne.n	8003478 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fe fb3c 	bl	8001b32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8b6 	bl	800363c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034d0:	e099      	b.n	8003606 <HAL_UART_IRQHandler+0x50e>
 80034d2:	bf00      	nop
 80034d4:	08003873 	.word	0x08003873
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 808b 	beq.w	800360a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80034f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8086 	beq.w	800360a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	330c      	adds	r3, #12
 8003504:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800350e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003510:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003514:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003522:	647a      	str	r2, [r7, #68]	; 0x44
 8003524:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003526:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003528:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800352a:	e841 2300 	strex	r3, r2, [r1]
 800352e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e3      	bne.n	80034fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3314      	adds	r3, #20
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	623b      	str	r3, [r7, #32]
   return(result);
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3314      	adds	r3, #20
 8003556:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800355a:	633a      	str	r2, [r7, #48]	; 0x30
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e3      	bne.n	8003536 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	330c      	adds	r3, #12
 8003582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	60fb      	str	r3, [r7, #12]
   return(result);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0310 	bic.w	r3, r3, #16
 8003592:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80035a0:	61fa      	str	r2, [r7, #28]
 80035a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	69b9      	ldr	r1, [r7, #24]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	617b      	str	r3, [r7, #20]
   return(result);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e3      	bne.n	800357c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035b8:	4619      	mov	r1, r3
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f83e 	bl	800363c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035c0:	e023      	b.n	800360a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_UART_IRQHandler+0x4ea>
 80035ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f95d 	bl	800389a <UART_Transmit_IT>
    return;
 80035e0:	e014      	b.n	800360c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00e      	beq.n	800360c <HAL_UART_IRQHandler+0x514>
 80035ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f99d 	bl	800393a <UART_EndTransmit_IT>
    return;
 8003600:	e004      	b.n	800360c <HAL_UART_IRQHandler+0x514>
    return;
 8003602:	bf00      	nop
 8003604:	e002      	b.n	800360c <HAL_UART_IRQHandler+0x514>
      return;
 8003606:	bf00      	nop
 8003608:	e000      	b.n	800360c <HAL_UART_IRQHandler+0x514>
      return;
 800360a:	bf00      	nop
  }
}
 800360c:	37e8      	adds	r7, #232	; 0xe8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop

08003614 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b090      	sub	sp, #64	; 0x40
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003664:	e050      	b.n	8003708 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d04c      	beq.n	8003708 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800366e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <UART_WaitOnFlagUntilTimeout+0x30>
 8003674:	f7fd fc90 	bl	8000f98 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003680:	429a      	cmp	r2, r3
 8003682:	d241      	bcs.n	8003708 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	330c      	adds	r3, #12
 80036a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036a4:	637a      	str	r2, [r7, #52]	; 0x34
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ac:	e841 2300 	strex	r3, r2, [r1]
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e5      	bne.n	8003684 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3314      	adds	r3, #20
 80036be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	e853 3f00 	ldrex	r3, [r3]
 80036c6:	613b      	str	r3, [r7, #16]
   return(result);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f023 0301 	bic.w	r3, r3, #1
 80036ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3314      	adds	r3, #20
 80036d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036d8:	623a      	str	r2, [r7, #32]
 80036da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	69f9      	ldr	r1, [r7, #28]
 80036de:	6a3a      	ldr	r2, [r7, #32]
 80036e0:	e841 2300 	strex	r3, r2, [r1]
 80036e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e5      	bne.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e00f      	b.n	8003728 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	429a      	cmp	r2, r3
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	429a      	cmp	r2, r3
 8003724:	d09f      	beq.n	8003666 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3740      	adds	r7, #64	; 0x40
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	4613      	mov	r3, r2
 800373c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	88fa      	ldrh	r2, [r7, #6]
 8003748:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2222      	movs	r2, #34	; 0x22
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d007      	beq.n	800377e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800377c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0201 	orr.w	r2, r2, #1
 800378c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0220 	orr.w	r2, r2, #32
 800379c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b095      	sub	sp, #84	; 0x54
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	330c      	adds	r3, #12
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037d4:	643a      	str	r2, [r7, #64]	; 0x40
 80037d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037dc:	e841 2300 	strex	r3, r2, [r1]
 80037e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e5      	bne.n	80037b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3314      	adds	r3, #20
 80037ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3314      	adds	r3, #20
 8003806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003808:	62fa      	str	r2, [r7, #44]	; 0x2c
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800380e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e5      	bne.n	80037e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	2b01      	cmp	r3, #1
 8003822:	d119      	bne.n	8003858 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	60bb      	str	r3, [r7, #8]
   return(result);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f023 0310 	bic.w	r3, r3, #16
 800383a:	647b      	str	r3, [r7, #68]	; 0x44
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	330c      	adds	r3, #12
 8003842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003844:	61ba      	str	r2, [r7, #24]
 8003846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6979      	ldr	r1, [r7, #20]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	613b      	str	r3, [r7, #16]
   return(result);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e5      	bne.n	8003824 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003866:	bf00      	nop
 8003868:	3754      	adds	r7, #84	; 0x54
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f7ff fecb 	bl	8003628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800389a:	b480      	push	{r7}
 800389c:	b085      	sub	sp, #20
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b21      	cmp	r3, #33	; 0x21
 80038ac:	d13e      	bne.n	800392c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b6:	d114      	bne.n	80038e2 <UART_Transmit_IT+0x48>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d110      	bne.n	80038e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	1c9a      	adds	r2, r3, #2
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	621a      	str	r2, [r3, #32]
 80038e0:	e008      	b.n	80038f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	1c59      	adds	r1, r3, #1
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6211      	str	r1, [r2, #32]
 80038ec:	781a      	ldrb	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4619      	mov	r1, r3
 8003902:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10f      	bne.n	8003928 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003916:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003926:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003950:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fe5a 	bl	8003614 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b08c      	sub	sp, #48	; 0x30
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b22      	cmp	r3, #34	; 0x22
 800397c:	f040 80ab 	bne.w	8003ad6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003988:	d117      	bne.n	80039ba <UART_Receive_IT+0x50>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d113      	bne.n	80039ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003992:	2300      	movs	r3, #0
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	1c9a      	adds	r2, r3, #2
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28
 80039b8:	e026      	b.n	8003a08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039cc:	d007      	beq.n	80039de <UART_Receive_IT+0x74>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <UART_Receive_IT+0x82>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	e008      	b.n	80039fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	4619      	mov	r1, r3
 8003a16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d15a      	bne.n	8003ad2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0220 	bic.w	r2, r2, #32
 8003a2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d135      	bne.n	8003ac8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	330c      	adds	r3, #12
 8003a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	613b      	str	r3, [r7, #16]
   return(result);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f023 0310 	bic.w	r3, r3, #16
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a82:	623a      	str	r2, [r7, #32]
 8003a84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	69f9      	ldr	r1, [r7, #28]
 8003a88:	6a3a      	ldr	r2, [r7, #32]
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e5      	bne.n	8003a62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d10a      	bne.n	8003aba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff fdbb 	bl	800363c <HAL_UARTEx_RxEventCallback>
 8003ac6:	e002      	b.n	8003ace <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7fc ffff 	bl	8000acc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e002      	b.n	8003ad8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e000      	b.n	8003ad8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
  }
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3730      	adds	r7, #48	; 0x30
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae4:	b0c0      	sub	sp, #256	; 0x100
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	68d9      	ldr	r1, [r3, #12]
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	ea40 0301 	orr.w	r3, r0, r1
 8003b08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b38:	f021 010c 	bic.w	r1, r1, #12
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b46:	430b      	orrs	r3, r1
 8003b48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5a:	6999      	ldr	r1, [r3, #24]
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	ea40 0301 	orr.w	r3, r0, r1
 8003b66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4b8f      	ldr	r3, [pc, #572]	; (8003dac <UART_SetConfig+0x2cc>)
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d005      	beq.n	8003b80 <UART_SetConfig+0xa0>
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4b8d      	ldr	r3, [pc, #564]	; (8003db0 <UART_SetConfig+0x2d0>)
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d104      	bne.n	8003b8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b80:	f7fe fedc 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 8003b84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b88:	e003      	b.n	8003b92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b8a:	f7fe fec3 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 8003b8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b9c:	f040 810c 	bne.w	8003db8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003baa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bb2:	4622      	mov	r2, r4
 8003bb4:	462b      	mov	r3, r5
 8003bb6:	1891      	adds	r1, r2, r2
 8003bb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bba:	415b      	adcs	r3, r3
 8003bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	eb12 0801 	adds.w	r8, r2, r1
 8003bc8:	4629      	mov	r1, r5
 8003bca:	eb43 0901 	adc.w	r9, r3, r1
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003be2:	4690      	mov	r8, r2
 8003be4:	4699      	mov	r9, r3
 8003be6:	4623      	mov	r3, r4
 8003be8:	eb18 0303 	adds.w	r3, r8, r3
 8003bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bf0:	462b      	mov	r3, r5
 8003bf2:	eb49 0303 	adc.w	r3, r9, r3
 8003bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c0e:	460b      	mov	r3, r1
 8003c10:	18db      	adds	r3, r3, r3
 8003c12:	653b      	str	r3, [r7, #80]	; 0x50
 8003c14:	4613      	mov	r3, r2
 8003c16:	eb42 0303 	adc.w	r3, r2, r3
 8003c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c24:	f7fc fb34 	bl	8000290 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4b61      	ldr	r3, [pc, #388]	; (8003db4 <UART_SetConfig+0x2d4>)
 8003c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	011c      	lsls	r4, r3, #4
 8003c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c48:	4642      	mov	r2, r8
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	1891      	adds	r1, r2, r2
 8003c4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c50:	415b      	adcs	r3, r3
 8003c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c58:	4641      	mov	r1, r8
 8003c5a:	eb12 0a01 	adds.w	sl, r2, r1
 8003c5e:	4649      	mov	r1, r9
 8003c60:	eb43 0b01 	adc.w	fp, r3, r1
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c78:	4692      	mov	sl, r2
 8003c7a:	469b      	mov	fp, r3
 8003c7c:	4643      	mov	r3, r8
 8003c7e:	eb1a 0303 	adds.w	r3, sl, r3
 8003c82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c86:	464b      	mov	r3, r9
 8003c88:	eb4b 0303 	adc.w	r3, fp, r3
 8003c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ca0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	18db      	adds	r3, r3, r3
 8003ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8003caa:	4613      	mov	r3, r2
 8003cac:	eb42 0303 	adc.w	r3, r2, r3
 8003cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cba:	f7fc fae9 	bl	8000290 <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <UART_SetConfig+0x2d4>)
 8003cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2264      	movs	r2, #100	; 0x64
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	1acb      	subs	r3, r1, r3
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cda:	4b36      	ldr	r3, [pc, #216]	; (8003db4 <UART_SetConfig+0x2d4>)
 8003cdc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ce8:	441c      	add	r4, r3
 8003cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	464b      	mov	r3, r9
 8003d00:	1891      	adds	r1, r2, r2
 8003d02:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d04:	415b      	adcs	r3, r3
 8003d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d0c:	4641      	mov	r1, r8
 8003d0e:	1851      	adds	r1, r2, r1
 8003d10:	6339      	str	r1, [r7, #48]	; 0x30
 8003d12:	4649      	mov	r1, r9
 8003d14:	414b      	adcs	r3, r1
 8003d16:	637b      	str	r3, [r7, #52]	; 0x34
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d24:	4659      	mov	r1, fp
 8003d26:	00cb      	lsls	r3, r1, #3
 8003d28:	4651      	mov	r1, sl
 8003d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2e:	4651      	mov	r1, sl
 8003d30:	00ca      	lsls	r2, r1, #3
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	4642      	mov	r2, r8
 8003d3a:	189b      	adds	r3, r3, r2
 8003d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d40:	464b      	mov	r3, r9
 8003d42:	460a      	mov	r2, r1
 8003d44:	eb42 0303 	adc.w	r3, r2, r3
 8003d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d60:	460b      	mov	r3, r1
 8003d62:	18db      	adds	r3, r3, r3
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d66:	4613      	mov	r3, r2
 8003d68:	eb42 0303 	adc.w	r3, r2, r3
 8003d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d76:	f7fc fa8b 	bl	8000290 <__aeabi_uldivmod>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <UART_SetConfig+0x2d4>)
 8003d80:	fba3 1302 	umull	r1, r3, r3, r2
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	2164      	movs	r1, #100	; 0x64
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	3332      	adds	r3, #50	; 0x32
 8003d92:	4a08      	ldr	r2, [pc, #32]	; (8003db4 <UART_SetConfig+0x2d4>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	f003 0207 	and.w	r2, r3, #7
 8003d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4422      	add	r2, r4
 8003da6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003da8:	e105      	b.n	8003fb6 <UART_SetConfig+0x4d6>
 8003daa:	bf00      	nop
 8003dac:	40011000 	.word	0x40011000
 8003db0:	40011400 	.word	0x40011400
 8003db4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003dca:	4642      	mov	r2, r8
 8003dcc:	464b      	mov	r3, r9
 8003dce:	1891      	adds	r1, r2, r2
 8003dd0:	6239      	str	r1, [r7, #32]
 8003dd2:	415b      	adcs	r3, r3
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dda:	4641      	mov	r1, r8
 8003ddc:	1854      	adds	r4, r2, r1
 8003dde:	4649      	mov	r1, r9
 8003de0:	eb43 0501 	adc.w	r5, r3, r1
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	00eb      	lsls	r3, r5, #3
 8003dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003df2:	00e2      	lsls	r2, r4, #3
 8003df4:	4614      	mov	r4, r2
 8003df6:	461d      	mov	r5, r3
 8003df8:	4643      	mov	r3, r8
 8003dfa:	18e3      	adds	r3, r4, r3
 8003dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e00:	464b      	mov	r3, r9
 8003e02:	eb45 0303 	adc.w	r3, r5, r3
 8003e06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e26:	4629      	mov	r1, r5
 8003e28:	008b      	lsls	r3, r1, #2
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e30:	4621      	mov	r1, r4
 8003e32:	008a      	lsls	r2, r1, #2
 8003e34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e38:	f7fc fa2a 	bl	8000290 <__aeabi_uldivmod>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4b60      	ldr	r3, [pc, #384]	; (8003fc4 <UART_SetConfig+0x4e4>)
 8003e42:	fba3 2302 	umull	r2, r3, r3, r2
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	011c      	lsls	r4, r3, #4
 8003e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	464b      	mov	r3, r9
 8003e60:	1891      	adds	r1, r2, r2
 8003e62:	61b9      	str	r1, [r7, #24]
 8003e64:	415b      	adcs	r3, r3
 8003e66:	61fb      	str	r3, [r7, #28]
 8003e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	1851      	adds	r1, r2, r1
 8003e70:	6139      	str	r1, [r7, #16]
 8003e72:	4649      	mov	r1, r9
 8003e74:	414b      	adcs	r3, r1
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e84:	4659      	mov	r1, fp
 8003e86:	00cb      	lsls	r3, r1, #3
 8003e88:	4651      	mov	r1, sl
 8003e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e8e:	4651      	mov	r1, sl
 8003e90:	00ca      	lsls	r2, r1, #3
 8003e92:	4610      	mov	r0, r2
 8003e94:	4619      	mov	r1, r3
 8003e96:	4603      	mov	r3, r0
 8003e98:	4642      	mov	r2, r8
 8003e9a:	189b      	adds	r3, r3, r2
 8003e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ea0:	464b      	mov	r3, r9
 8003ea2:	460a      	mov	r2, r1
 8003ea4:	eb42 0303 	adc.w	r3, r2, r3
 8003ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ec4:	4649      	mov	r1, r9
 8003ec6:	008b      	lsls	r3, r1, #2
 8003ec8:	4641      	mov	r1, r8
 8003eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ece:	4641      	mov	r1, r8
 8003ed0:	008a      	lsls	r2, r1, #2
 8003ed2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ed6:	f7fc f9db 	bl	8000290 <__aeabi_uldivmod>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4b39      	ldr	r3, [pc, #228]	; (8003fc4 <UART_SetConfig+0x4e4>)
 8003ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	2164      	movs	r1, #100	; 0x64
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	3332      	adds	r3, #50	; 0x32
 8003ef2:	4a34      	ldr	r2, [pc, #208]	; (8003fc4 <UART_SetConfig+0x4e4>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003efe:	441c      	add	r4, r3
 8003f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f04:	2200      	movs	r2, #0
 8003f06:	673b      	str	r3, [r7, #112]	; 0x70
 8003f08:	677a      	str	r2, [r7, #116]	; 0x74
 8003f0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f0e:	4642      	mov	r2, r8
 8003f10:	464b      	mov	r3, r9
 8003f12:	1891      	adds	r1, r2, r2
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	415b      	adcs	r3, r3
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f1e:	4641      	mov	r1, r8
 8003f20:	1851      	adds	r1, r2, r1
 8003f22:	6039      	str	r1, [r7, #0]
 8003f24:	4649      	mov	r1, r9
 8003f26:	414b      	adcs	r3, r1
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f36:	4659      	mov	r1, fp
 8003f38:	00cb      	lsls	r3, r1, #3
 8003f3a:	4651      	mov	r1, sl
 8003f3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f40:	4651      	mov	r1, sl
 8003f42:	00ca      	lsls	r2, r1, #3
 8003f44:	4610      	mov	r0, r2
 8003f46:	4619      	mov	r1, r3
 8003f48:	4603      	mov	r3, r0
 8003f4a:	4642      	mov	r2, r8
 8003f4c:	189b      	adds	r3, r3, r2
 8003f4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f50:	464b      	mov	r3, r9
 8003f52:	460a      	mov	r2, r1
 8003f54:	eb42 0303 	adc.w	r3, r2, r3
 8003f58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	663b      	str	r3, [r7, #96]	; 0x60
 8003f64:	667a      	str	r2, [r7, #100]	; 0x64
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f72:	4649      	mov	r1, r9
 8003f74:	008b      	lsls	r3, r1, #2
 8003f76:	4641      	mov	r1, r8
 8003f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f7c:	4641      	mov	r1, r8
 8003f7e:	008a      	lsls	r2, r1, #2
 8003f80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f84:	f7fc f984 	bl	8000290 <__aeabi_uldivmod>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <UART_SetConfig+0x4e4>)
 8003f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	2164      	movs	r1, #100	; 0x64
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	3332      	adds	r3, #50	; 0x32
 8003fa0:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <UART_SetConfig+0x4e4>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	f003 020f 	and.w	r2, r3, #15
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4422      	add	r2, r4
 8003fb4:	609a      	str	r2, [r3, #8]
}
 8003fb6:	bf00      	nop
 8003fb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc2:	bf00      	nop
 8003fc4:	51eb851f 	.word	0x51eb851f

08003fc8 <__errno>:
 8003fc8:	4b01      	ldr	r3, [pc, #4]	; (8003fd0 <__errno+0x8>)
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	2000000c 	.word	0x2000000c

08003fd4 <__libc_init_array>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	4d0d      	ldr	r5, [pc, #52]	; (800400c <__libc_init_array+0x38>)
 8003fd8:	4c0d      	ldr	r4, [pc, #52]	; (8004010 <__libc_init_array+0x3c>)
 8003fda:	1b64      	subs	r4, r4, r5
 8003fdc:	10a4      	asrs	r4, r4, #2
 8003fde:	2600      	movs	r6, #0
 8003fe0:	42a6      	cmp	r6, r4
 8003fe2:	d109      	bne.n	8003ff8 <__libc_init_array+0x24>
 8003fe4:	4d0b      	ldr	r5, [pc, #44]	; (8004014 <__libc_init_array+0x40>)
 8003fe6:	4c0c      	ldr	r4, [pc, #48]	; (8004018 <__libc_init_array+0x44>)
 8003fe8:	f000 fca4 	bl	8004934 <_init>
 8003fec:	1b64      	subs	r4, r4, r5
 8003fee:	10a4      	asrs	r4, r4, #2
 8003ff0:	2600      	movs	r6, #0
 8003ff2:	42a6      	cmp	r6, r4
 8003ff4:	d105      	bne.n	8004002 <__libc_init_array+0x2e>
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
 8003ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffc:	4798      	blx	r3
 8003ffe:	3601      	adds	r6, #1
 8004000:	e7ee      	b.n	8003fe0 <__libc_init_array+0xc>
 8004002:	f855 3b04 	ldr.w	r3, [r5], #4
 8004006:	4798      	blx	r3
 8004008:	3601      	adds	r6, #1
 800400a:	e7f2      	b.n	8003ff2 <__libc_init_array+0x1e>
 800400c:	080049cc 	.word	0x080049cc
 8004010:	080049cc 	.word	0x080049cc
 8004014:	080049cc 	.word	0x080049cc
 8004018:	080049d0 	.word	0x080049d0

0800401c <memset>:
 800401c:	4402      	add	r2, r0
 800401e:	4603      	mov	r3, r0
 8004020:	4293      	cmp	r3, r2
 8004022:	d100      	bne.n	8004026 <memset+0xa>
 8004024:	4770      	bx	lr
 8004026:	f803 1b01 	strb.w	r1, [r3], #1
 800402a:	e7f9      	b.n	8004020 <memset+0x4>

0800402c <siprintf>:
 800402c:	b40e      	push	{r1, r2, r3}
 800402e:	b500      	push	{lr}
 8004030:	b09c      	sub	sp, #112	; 0x70
 8004032:	ab1d      	add	r3, sp, #116	; 0x74
 8004034:	9002      	str	r0, [sp, #8]
 8004036:	9006      	str	r0, [sp, #24]
 8004038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800403c:	4809      	ldr	r0, [pc, #36]	; (8004064 <siprintf+0x38>)
 800403e:	9107      	str	r1, [sp, #28]
 8004040:	9104      	str	r1, [sp, #16]
 8004042:	4909      	ldr	r1, [pc, #36]	; (8004068 <siprintf+0x3c>)
 8004044:	f853 2b04 	ldr.w	r2, [r3], #4
 8004048:	9105      	str	r1, [sp, #20]
 800404a:	6800      	ldr	r0, [r0, #0]
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	a902      	add	r1, sp, #8
 8004050:	f000 f87e 	bl	8004150 <_svfiprintf_r>
 8004054:	9b02      	ldr	r3, [sp, #8]
 8004056:	2200      	movs	r2, #0
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	b01c      	add	sp, #112	; 0x70
 800405c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004060:	b003      	add	sp, #12
 8004062:	4770      	bx	lr
 8004064:	2000000c 	.word	0x2000000c
 8004068:	ffff0208 	.word	0xffff0208

0800406c <strstr>:
 800406c:	780a      	ldrb	r2, [r1, #0]
 800406e:	b570      	push	{r4, r5, r6, lr}
 8004070:	b96a      	cbnz	r2, 800408e <strstr+0x22>
 8004072:	bd70      	pop	{r4, r5, r6, pc}
 8004074:	429a      	cmp	r2, r3
 8004076:	d109      	bne.n	800408c <strstr+0x20>
 8004078:	460c      	mov	r4, r1
 800407a:	4605      	mov	r5, r0
 800407c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f6      	beq.n	8004072 <strstr+0x6>
 8004084:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004088:	429e      	cmp	r6, r3
 800408a:	d0f7      	beq.n	800407c <strstr+0x10>
 800408c:	3001      	adds	r0, #1
 800408e:	7803      	ldrb	r3, [r0, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ef      	bne.n	8004074 <strstr+0x8>
 8004094:	4618      	mov	r0, r3
 8004096:	e7ec      	b.n	8004072 <strstr+0x6>

08004098 <__ssputs_r>:
 8004098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800409c:	688e      	ldr	r6, [r1, #8]
 800409e:	429e      	cmp	r6, r3
 80040a0:	4682      	mov	sl, r0
 80040a2:	460c      	mov	r4, r1
 80040a4:	4690      	mov	r8, r2
 80040a6:	461f      	mov	r7, r3
 80040a8:	d838      	bhi.n	800411c <__ssputs_r+0x84>
 80040aa:	898a      	ldrh	r2, [r1, #12]
 80040ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040b0:	d032      	beq.n	8004118 <__ssputs_r+0x80>
 80040b2:	6825      	ldr	r5, [r4, #0]
 80040b4:	6909      	ldr	r1, [r1, #16]
 80040b6:	eba5 0901 	sub.w	r9, r5, r1
 80040ba:	6965      	ldr	r5, [r4, #20]
 80040bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040c4:	3301      	adds	r3, #1
 80040c6:	444b      	add	r3, r9
 80040c8:	106d      	asrs	r5, r5, #1
 80040ca:	429d      	cmp	r5, r3
 80040cc:	bf38      	it	cc
 80040ce:	461d      	movcc	r5, r3
 80040d0:	0553      	lsls	r3, r2, #21
 80040d2:	d531      	bpl.n	8004138 <__ssputs_r+0xa0>
 80040d4:	4629      	mov	r1, r5
 80040d6:	f000 fb63 	bl	80047a0 <_malloc_r>
 80040da:	4606      	mov	r6, r0
 80040dc:	b950      	cbnz	r0, 80040f4 <__ssputs_r+0x5c>
 80040de:	230c      	movs	r3, #12
 80040e0:	f8ca 3000 	str.w	r3, [sl]
 80040e4:	89a3      	ldrh	r3, [r4, #12]
 80040e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ea:	81a3      	strh	r3, [r4, #12]
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295
 80040f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f4:	6921      	ldr	r1, [r4, #16]
 80040f6:	464a      	mov	r2, r9
 80040f8:	f000 fabe 	bl	8004678 <memcpy>
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004106:	81a3      	strh	r3, [r4, #12]
 8004108:	6126      	str	r6, [r4, #16]
 800410a:	6165      	str	r5, [r4, #20]
 800410c:	444e      	add	r6, r9
 800410e:	eba5 0509 	sub.w	r5, r5, r9
 8004112:	6026      	str	r6, [r4, #0]
 8004114:	60a5      	str	r5, [r4, #8]
 8004116:	463e      	mov	r6, r7
 8004118:	42be      	cmp	r6, r7
 800411a:	d900      	bls.n	800411e <__ssputs_r+0x86>
 800411c:	463e      	mov	r6, r7
 800411e:	6820      	ldr	r0, [r4, #0]
 8004120:	4632      	mov	r2, r6
 8004122:	4641      	mov	r1, r8
 8004124:	f000 fab6 	bl	8004694 <memmove>
 8004128:	68a3      	ldr	r3, [r4, #8]
 800412a:	1b9b      	subs	r3, r3, r6
 800412c:	60a3      	str	r3, [r4, #8]
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	4433      	add	r3, r6
 8004132:	6023      	str	r3, [r4, #0]
 8004134:	2000      	movs	r0, #0
 8004136:	e7db      	b.n	80040f0 <__ssputs_r+0x58>
 8004138:	462a      	mov	r2, r5
 800413a:	f000 fba5 	bl	8004888 <_realloc_r>
 800413e:	4606      	mov	r6, r0
 8004140:	2800      	cmp	r0, #0
 8004142:	d1e1      	bne.n	8004108 <__ssputs_r+0x70>
 8004144:	6921      	ldr	r1, [r4, #16]
 8004146:	4650      	mov	r0, sl
 8004148:	f000 fabe 	bl	80046c8 <_free_r>
 800414c:	e7c7      	b.n	80040de <__ssputs_r+0x46>
	...

08004150 <_svfiprintf_r>:
 8004150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004154:	4698      	mov	r8, r3
 8004156:	898b      	ldrh	r3, [r1, #12]
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	b09d      	sub	sp, #116	; 0x74
 800415c:	4607      	mov	r7, r0
 800415e:	460d      	mov	r5, r1
 8004160:	4614      	mov	r4, r2
 8004162:	d50e      	bpl.n	8004182 <_svfiprintf_r+0x32>
 8004164:	690b      	ldr	r3, [r1, #16]
 8004166:	b963      	cbnz	r3, 8004182 <_svfiprintf_r+0x32>
 8004168:	2140      	movs	r1, #64	; 0x40
 800416a:	f000 fb19 	bl	80047a0 <_malloc_r>
 800416e:	6028      	str	r0, [r5, #0]
 8004170:	6128      	str	r0, [r5, #16]
 8004172:	b920      	cbnz	r0, 800417e <_svfiprintf_r+0x2e>
 8004174:	230c      	movs	r3, #12
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	f04f 30ff 	mov.w	r0, #4294967295
 800417c:	e0d1      	b.n	8004322 <_svfiprintf_r+0x1d2>
 800417e:	2340      	movs	r3, #64	; 0x40
 8004180:	616b      	str	r3, [r5, #20]
 8004182:	2300      	movs	r3, #0
 8004184:	9309      	str	r3, [sp, #36]	; 0x24
 8004186:	2320      	movs	r3, #32
 8004188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800418c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004190:	2330      	movs	r3, #48	; 0x30
 8004192:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800433c <_svfiprintf_r+0x1ec>
 8004196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800419a:	f04f 0901 	mov.w	r9, #1
 800419e:	4623      	mov	r3, r4
 80041a0:	469a      	mov	sl, r3
 80041a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041a6:	b10a      	cbz	r2, 80041ac <_svfiprintf_r+0x5c>
 80041a8:	2a25      	cmp	r2, #37	; 0x25
 80041aa:	d1f9      	bne.n	80041a0 <_svfiprintf_r+0x50>
 80041ac:	ebba 0b04 	subs.w	fp, sl, r4
 80041b0:	d00b      	beq.n	80041ca <_svfiprintf_r+0x7a>
 80041b2:	465b      	mov	r3, fp
 80041b4:	4622      	mov	r2, r4
 80041b6:	4629      	mov	r1, r5
 80041b8:	4638      	mov	r0, r7
 80041ba:	f7ff ff6d 	bl	8004098 <__ssputs_r>
 80041be:	3001      	adds	r0, #1
 80041c0:	f000 80aa 	beq.w	8004318 <_svfiprintf_r+0x1c8>
 80041c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041c6:	445a      	add	r2, fp
 80041c8:	9209      	str	r2, [sp, #36]	; 0x24
 80041ca:	f89a 3000 	ldrb.w	r3, [sl]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 80a2 	beq.w	8004318 <_svfiprintf_r+0x1c8>
 80041d4:	2300      	movs	r3, #0
 80041d6:	f04f 32ff 	mov.w	r2, #4294967295
 80041da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041de:	f10a 0a01 	add.w	sl, sl, #1
 80041e2:	9304      	str	r3, [sp, #16]
 80041e4:	9307      	str	r3, [sp, #28]
 80041e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041ea:	931a      	str	r3, [sp, #104]	; 0x68
 80041ec:	4654      	mov	r4, sl
 80041ee:	2205      	movs	r2, #5
 80041f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f4:	4851      	ldr	r0, [pc, #324]	; (800433c <_svfiprintf_r+0x1ec>)
 80041f6:	f7fb fffb 	bl	80001f0 <memchr>
 80041fa:	9a04      	ldr	r2, [sp, #16]
 80041fc:	b9d8      	cbnz	r0, 8004236 <_svfiprintf_r+0xe6>
 80041fe:	06d0      	lsls	r0, r2, #27
 8004200:	bf44      	itt	mi
 8004202:	2320      	movmi	r3, #32
 8004204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004208:	0711      	lsls	r1, r2, #28
 800420a:	bf44      	itt	mi
 800420c:	232b      	movmi	r3, #43	; 0x2b
 800420e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004212:	f89a 3000 	ldrb.w	r3, [sl]
 8004216:	2b2a      	cmp	r3, #42	; 0x2a
 8004218:	d015      	beq.n	8004246 <_svfiprintf_r+0xf6>
 800421a:	9a07      	ldr	r2, [sp, #28]
 800421c:	4654      	mov	r4, sl
 800421e:	2000      	movs	r0, #0
 8004220:	f04f 0c0a 	mov.w	ip, #10
 8004224:	4621      	mov	r1, r4
 8004226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800422a:	3b30      	subs	r3, #48	; 0x30
 800422c:	2b09      	cmp	r3, #9
 800422e:	d94e      	bls.n	80042ce <_svfiprintf_r+0x17e>
 8004230:	b1b0      	cbz	r0, 8004260 <_svfiprintf_r+0x110>
 8004232:	9207      	str	r2, [sp, #28]
 8004234:	e014      	b.n	8004260 <_svfiprintf_r+0x110>
 8004236:	eba0 0308 	sub.w	r3, r0, r8
 800423a:	fa09 f303 	lsl.w	r3, r9, r3
 800423e:	4313      	orrs	r3, r2
 8004240:	9304      	str	r3, [sp, #16]
 8004242:	46a2      	mov	sl, r4
 8004244:	e7d2      	b.n	80041ec <_svfiprintf_r+0x9c>
 8004246:	9b03      	ldr	r3, [sp, #12]
 8004248:	1d19      	adds	r1, r3, #4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	9103      	str	r1, [sp, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	bfbb      	ittet	lt
 8004252:	425b      	neglt	r3, r3
 8004254:	f042 0202 	orrlt.w	r2, r2, #2
 8004258:	9307      	strge	r3, [sp, #28]
 800425a:	9307      	strlt	r3, [sp, #28]
 800425c:	bfb8      	it	lt
 800425e:	9204      	strlt	r2, [sp, #16]
 8004260:	7823      	ldrb	r3, [r4, #0]
 8004262:	2b2e      	cmp	r3, #46	; 0x2e
 8004264:	d10c      	bne.n	8004280 <_svfiprintf_r+0x130>
 8004266:	7863      	ldrb	r3, [r4, #1]
 8004268:	2b2a      	cmp	r3, #42	; 0x2a
 800426a:	d135      	bne.n	80042d8 <_svfiprintf_r+0x188>
 800426c:	9b03      	ldr	r3, [sp, #12]
 800426e:	1d1a      	adds	r2, r3, #4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	9203      	str	r2, [sp, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	bfb8      	it	lt
 8004278:	f04f 33ff 	movlt.w	r3, #4294967295
 800427c:	3402      	adds	r4, #2
 800427e:	9305      	str	r3, [sp, #20]
 8004280:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800434c <_svfiprintf_r+0x1fc>
 8004284:	7821      	ldrb	r1, [r4, #0]
 8004286:	2203      	movs	r2, #3
 8004288:	4650      	mov	r0, sl
 800428a:	f7fb ffb1 	bl	80001f0 <memchr>
 800428e:	b140      	cbz	r0, 80042a2 <_svfiprintf_r+0x152>
 8004290:	2340      	movs	r3, #64	; 0x40
 8004292:	eba0 000a 	sub.w	r0, r0, sl
 8004296:	fa03 f000 	lsl.w	r0, r3, r0
 800429a:	9b04      	ldr	r3, [sp, #16]
 800429c:	4303      	orrs	r3, r0
 800429e:	3401      	adds	r4, #1
 80042a0:	9304      	str	r3, [sp, #16]
 80042a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a6:	4826      	ldr	r0, [pc, #152]	; (8004340 <_svfiprintf_r+0x1f0>)
 80042a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042ac:	2206      	movs	r2, #6
 80042ae:	f7fb ff9f 	bl	80001f0 <memchr>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d038      	beq.n	8004328 <_svfiprintf_r+0x1d8>
 80042b6:	4b23      	ldr	r3, [pc, #140]	; (8004344 <_svfiprintf_r+0x1f4>)
 80042b8:	bb1b      	cbnz	r3, 8004302 <_svfiprintf_r+0x1b2>
 80042ba:	9b03      	ldr	r3, [sp, #12]
 80042bc:	3307      	adds	r3, #7
 80042be:	f023 0307 	bic.w	r3, r3, #7
 80042c2:	3308      	adds	r3, #8
 80042c4:	9303      	str	r3, [sp, #12]
 80042c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042c8:	4433      	add	r3, r6
 80042ca:	9309      	str	r3, [sp, #36]	; 0x24
 80042cc:	e767      	b.n	800419e <_svfiprintf_r+0x4e>
 80042ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80042d2:	460c      	mov	r4, r1
 80042d4:	2001      	movs	r0, #1
 80042d6:	e7a5      	b.n	8004224 <_svfiprintf_r+0xd4>
 80042d8:	2300      	movs	r3, #0
 80042da:	3401      	adds	r4, #1
 80042dc:	9305      	str	r3, [sp, #20]
 80042de:	4619      	mov	r1, r3
 80042e0:	f04f 0c0a 	mov.w	ip, #10
 80042e4:	4620      	mov	r0, r4
 80042e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042ea:	3a30      	subs	r2, #48	; 0x30
 80042ec:	2a09      	cmp	r2, #9
 80042ee:	d903      	bls.n	80042f8 <_svfiprintf_r+0x1a8>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0c5      	beq.n	8004280 <_svfiprintf_r+0x130>
 80042f4:	9105      	str	r1, [sp, #20]
 80042f6:	e7c3      	b.n	8004280 <_svfiprintf_r+0x130>
 80042f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80042fc:	4604      	mov	r4, r0
 80042fe:	2301      	movs	r3, #1
 8004300:	e7f0      	b.n	80042e4 <_svfiprintf_r+0x194>
 8004302:	ab03      	add	r3, sp, #12
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	462a      	mov	r2, r5
 8004308:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <_svfiprintf_r+0x1f8>)
 800430a:	a904      	add	r1, sp, #16
 800430c:	4638      	mov	r0, r7
 800430e:	f3af 8000 	nop.w
 8004312:	1c42      	adds	r2, r0, #1
 8004314:	4606      	mov	r6, r0
 8004316:	d1d6      	bne.n	80042c6 <_svfiprintf_r+0x176>
 8004318:	89ab      	ldrh	r3, [r5, #12]
 800431a:	065b      	lsls	r3, r3, #25
 800431c:	f53f af2c 	bmi.w	8004178 <_svfiprintf_r+0x28>
 8004320:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004322:	b01d      	add	sp, #116	; 0x74
 8004324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004328:	ab03      	add	r3, sp, #12
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	462a      	mov	r2, r5
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <_svfiprintf_r+0x1f8>)
 8004330:	a904      	add	r1, sp, #16
 8004332:	4638      	mov	r0, r7
 8004334:	f000 f87a 	bl	800442c <_printf_i>
 8004338:	e7eb      	b.n	8004312 <_svfiprintf_r+0x1c2>
 800433a:	bf00      	nop
 800433c:	08004990 	.word	0x08004990
 8004340:	0800499a 	.word	0x0800499a
 8004344:	00000000 	.word	0x00000000
 8004348:	08004099 	.word	0x08004099
 800434c:	08004996 	.word	0x08004996

08004350 <_printf_common>:
 8004350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004354:	4616      	mov	r6, r2
 8004356:	4699      	mov	r9, r3
 8004358:	688a      	ldr	r2, [r1, #8]
 800435a:	690b      	ldr	r3, [r1, #16]
 800435c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004360:	4293      	cmp	r3, r2
 8004362:	bfb8      	it	lt
 8004364:	4613      	movlt	r3, r2
 8004366:	6033      	str	r3, [r6, #0]
 8004368:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800436c:	4607      	mov	r7, r0
 800436e:	460c      	mov	r4, r1
 8004370:	b10a      	cbz	r2, 8004376 <_printf_common+0x26>
 8004372:	3301      	adds	r3, #1
 8004374:	6033      	str	r3, [r6, #0]
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	0699      	lsls	r1, r3, #26
 800437a:	bf42      	ittt	mi
 800437c:	6833      	ldrmi	r3, [r6, #0]
 800437e:	3302      	addmi	r3, #2
 8004380:	6033      	strmi	r3, [r6, #0]
 8004382:	6825      	ldr	r5, [r4, #0]
 8004384:	f015 0506 	ands.w	r5, r5, #6
 8004388:	d106      	bne.n	8004398 <_printf_common+0x48>
 800438a:	f104 0a19 	add.w	sl, r4, #25
 800438e:	68e3      	ldr	r3, [r4, #12]
 8004390:	6832      	ldr	r2, [r6, #0]
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	42ab      	cmp	r3, r5
 8004396:	dc26      	bgt.n	80043e6 <_printf_common+0x96>
 8004398:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800439c:	1e13      	subs	r3, r2, #0
 800439e:	6822      	ldr	r2, [r4, #0]
 80043a0:	bf18      	it	ne
 80043a2:	2301      	movne	r3, #1
 80043a4:	0692      	lsls	r2, r2, #26
 80043a6:	d42b      	bmi.n	8004400 <_printf_common+0xb0>
 80043a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043ac:	4649      	mov	r1, r9
 80043ae:	4638      	mov	r0, r7
 80043b0:	47c0      	blx	r8
 80043b2:	3001      	adds	r0, #1
 80043b4:	d01e      	beq.n	80043f4 <_printf_common+0xa4>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	68e5      	ldr	r5, [r4, #12]
 80043ba:	6832      	ldr	r2, [r6, #0]
 80043bc:	f003 0306 	and.w	r3, r3, #6
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	bf08      	it	eq
 80043c4:	1aad      	subeq	r5, r5, r2
 80043c6:	68a3      	ldr	r3, [r4, #8]
 80043c8:	6922      	ldr	r2, [r4, #16]
 80043ca:	bf0c      	ite	eq
 80043cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d0:	2500      	movne	r5, #0
 80043d2:	4293      	cmp	r3, r2
 80043d4:	bfc4      	itt	gt
 80043d6:	1a9b      	subgt	r3, r3, r2
 80043d8:	18ed      	addgt	r5, r5, r3
 80043da:	2600      	movs	r6, #0
 80043dc:	341a      	adds	r4, #26
 80043de:	42b5      	cmp	r5, r6
 80043e0:	d11a      	bne.n	8004418 <_printf_common+0xc8>
 80043e2:	2000      	movs	r0, #0
 80043e4:	e008      	b.n	80043f8 <_printf_common+0xa8>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4652      	mov	r2, sl
 80043ea:	4649      	mov	r1, r9
 80043ec:	4638      	mov	r0, r7
 80043ee:	47c0      	blx	r8
 80043f0:	3001      	adds	r0, #1
 80043f2:	d103      	bne.n	80043fc <_printf_common+0xac>
 80043f4:	f04f 30ff 	mov.w	r0, #4294967295
 80043f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fc:	3501      	adds	r5, #1
 80043fe:	e7c6      	b.n	800438e <_printf_common+0x3e>
 8004400:	18e1      	adds	r1, r4, r3
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	2030      	movs	r0, #48	; 0x30
 8004406:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800440a:	4422      	add	r2, r4
 800440c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004410:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004414:	3302      	adds	r3, #2
 8004416:	e7c7      	b.n	80043a8 <_printf_common+0x58>
 8004418:	2301      	movs	r3, #1
 800441a:	4622      	mov	r2, r4
 800441c:	4649      	mov	r1, r9
 800441e:	4638      	mov	r0, r7
 8004420:	47c0      	blx	r8
 8004422:	3001      	adds	r0, #1
 8004424:	d0e6      	beq.n	80043f4 <_printf_common+0xa4>
 8004426:	3601      	adds	r6, #1
 8004428:	e7d9      	b.n	80043de <_printf_common+0x8e>
	...

0800442c <_printf_i>:
 800442c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004430:	7e0f      	ldrb	r7, [r1, #24]
 8004432:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004434:	2f78      	cmp	r7, #120	; 0x78
 8004436:	4691      	mov	r9, r2
 8004438:	4680      	mov	r8, r0
 800443a:	460c      	mov	r4, r1
 800443c:	469a      	mov	sl, r3
 800443e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004442:	d807      	bhi.n	8004454 <_printf_i+0x28>
 8004444:	2f62      	cmp	r7, #98	; 0x62
 8004446:	d80a      	bhi.n	800445e <_printf_i+0x32>
 8004448:	2f00      	cmp	r7, #0
 800444a:	f000 80d8 	beq.w	80045fe <_printf_i+0x1d2>
 800444e:	2f58      	cmp	r7, #88	; 0x58
 8004450:	f000 80a3 	beq.w	800459a <_printf_i+0x16e>
 8004454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004458:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800445c:	e03a      	b.n	80044d4 <_printf_i+0xa8>
 800445e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004462:	2b15      	cmp	r3, #21
 8004464:	d8f6      	bhi.n	8004454 <_printf_i+0x28>
 8004466:	a101      	add	r1, pc, #4	; (adr r1, 800446c <_printf_i+0x40>)
 8004468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800446c:	080044c5 	.word	0x080044c5
 8004470:	080044d9 	.word	0x080044d9
 8004474:	08004455 	.word	0x08004455
 8004478:	08004455 	.word	0x08004455
 800447c:	08004455 	.word	0x08004455
 8004480:	08004455 	.word	0x08004455
 8004484:	080044d9 	.word	0x080044d9
 8004488:	08004455 	.word	0x08004455
 800448c:	08004455 	.word	0x08004455
 8004490:	08004455 	.word	0x08004455
 8004494:	08004455 	.word	0x08004455
 8004498:	080045e5 	.word	0x080045e5
 800449c:	08004509 	.word	0x08004509
 80044a0:	080045c7 	.word	0x080045c7
 80044a4:	08004455 	.word	0x08004455
 80044a8:	08004455 	.word	0x08004455
 80044ac:	08004607 	.word	0x08004607
 80044b0:	08004455 	.word	0x08004455
 80044b4:	08004509 	.word	0x08004509
 80044b8:	08004455 	.word	0x08004455
 80044bc:	08004455 	.word	0x08004455
 80044c0:	080045cf 	.word	0x080045cf
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	1d1a      	adds	r2, r3, #4
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	602a      	str	r2, [r5, #0]
 80044cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0a3      	b.n	8004620 <_printf_i+0x1f4>
 80044d8:	6820      	ldr	r0, [r4, #0]
 80044da:	6829      	ldr	r1, [r5, #0]
 80044dc:	0606      	lsls	r6, r0, #24
 80044de:	f101 0304 	add.w	r3, r1, #4
 80044e2:	d50a      	bpl.n	80044fa <_printf_i+0xce>
 80044e4:	680e      	ldr	r6, [r1, #0]
 80044e6:	602b      	str	r3, [r5, #0]
 80044e8:	2e00      	cmp	r6, #0
 80044ea:	da03      	bge.n	80044f4 <_printf_i+0xc8>
 80044ec:	232d      	movs	r3, #45	; 0x2d
 80044ee:	4276      	negs	r6, r6
 80044f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f4:	485e      	ldr	r0, [pc, #376]	; (8004670 <_printf_i+0x244>)
 80044f6:	230a      	movs	r3, #10
 80044f8:	e019      	b.n	800452e <_printf_i+0x102>
 80044fa:	680e      	ldr	r6, [r1, #0]
 80044fc:	602b      	str	r3, [r5, #0]
 80044fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004502:	bf18      	it	ne
 8004504:	b236      	sxthne	r6, r6
 8004506:	e7ef      	b.n	80044e8 <_printf_i+0xbc>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	6820      	ldr	r0, [r4, #0]
 800450c:	1d19      	adds	r1, r3, #4
 800450e:	6029      	str	r1, [r5, #0]
 8004510:	0601      	lsls	r1, r0, #24
 8004512:	d501      	bpl.n	8004518 <_printf_i+0xec>
 8004514:	681e      	ldr	r6, [r3, #0]
 8004516:	e002      	b.n	800451e <_printf_i+0xf2>
 8004518:	0646      	lsls	r6, r0, #25
 800451a:	d5fb      	bpl.n	8004514 <_printf_i+0xe8>
 800451c:	881e      	ldrh	r6, [r3, #0]
 800451e:	4854      	ldr	r0, [pc, #336]	; (8004670 <_printf_i+0x244>)
 8004520:	2f6f      	cmp	r7, #111	; 0x6f
 8004522:	bf0c      	ite	eq
 8004524:	2308      	moveq	r3, #8
 8004526:	230a      	movne	r3, #10
 8004528:	2100      	movs	r1, #0
 800452a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800452e:	6865      	ldr	r5, [r4, #4]
 8004530:	60a5      	str	r5, [r4, #8]
 8004532:	2d00      	cmp	r5, #0
 8004534:	bfa2      	ittt	ge
 8004536:	6821      	ldrge	r1, [r4, #0]
 8004538:	f021 0104 	bicge.w	r1, r1, #4
 800453c:	6021      	strge	r1, [r4, #0]
 800453e:	b90e      	cbnz	r6, 8004544 <_printf_i+0x118>
 8004540:	2d00      	cmp	r5, #0
 8004542:	d04d      	beq.n	80045e0 <_printf_i+0x1b4>
 8004544:	4615      	mov	r5, r2
 8004546:	fbb6 f1f3 	udiv	r1, r6, r3
 800454a:	fb03 6711 	mls	r7, r3, r1, r6
 800454e:	5dc7      	ldrb	r7, [r0, r7]
 8004550:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004554:	4637      	mov	r7, r6
 8004556:	42bb      	cmp	r3, r7
 8004558:	460e      	mov	r6, r1
 800455a:	d9f4      	bls.n	8004546 <_printf_i+0x11a>
 800455c:	2b08      	cmp	r3, #8
 800455e:	d10b      	bne.n	8004578 <_printf_i+0x14c>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	07de      	lsls	r6, r3, #31
 8004564:	d508      	bpl.n	8004578 <_printf_i+0x14c>
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	6861      	ldr	r1, [r4, #4]
 800456a:	4299      	cmp	r1, r3
 800456c:	bfde      	ittt	le
 800456e:	2330      	movle	r3, #48	; 0x30
 8004570:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004574:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004578:	1b52      	subs	r2, r2, r5
 800457a:	6122      	str	r2, [r4, #16]
 800457c:	f8cd a000 	str.w	sl, [sp]
 8004580:	464b      	mov	r3, r9
 8004582:	aa03      	add	r2, sp, #12
 8004584:	4621      	mov	r1, r4
 8004586:	4640      	mov	r0, r8
 8004588:	f7ff fee2 	bl	8004350 <_printf_common>
 800458c:	3001      	adds	r0, #1
 800458e:	d14c      	bne.n	800462a <_printf_i+0x1fe>
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	b004      	add	sp, #16
 8004596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459a:	4835      	ldr	r0, [pc, #212]	; (8004670 <_printf_i+0x244>)
 800459c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80045a0:	6829      	ldr	r1, [r5, #0]
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80045a8:	6029      	str	r1, [r5, #0]
 80045aa:	061d      	lsls	r5, r3, #24
 80045ac:	d514      	bpl.n	80045d8 <_printf_i+0x1ac>
 80045ae:	07df      	lsls	r7, r3, #31
 80045b0:	bf44      	itt	mi
 80045b2:	f043 0320 	orrmi.w	r3, r3, #32
 80045b6:	6023      	strmi	r3, [r4, #0]
 80045b8:	b91e      	cbnz	r6, 80045c2 <_printf_i+0x196>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	f023 0320 	bic.w	r3, r3, #32
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	2310      	movs	r3, #16
 80045c4:	e7b0      	b.n	8004528 <_printf_i+0xfc>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	f043 0320 	orr.w	r3, r3, #32
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	2378      	movs	r3, #120	; 0x78
 80045d0:	4828      	ldr	r0, [pc, #160]	; (8004674 <_printf_i+0x248>)
 80045d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045d6:	e7e3      	b.n	80045a0 <_printf_i+0x174>
 80045d8:	0659      	lsls	r1, r3, #25
 80045da:	bf48      	it	mi
 80045dc:	b2b6      	uxthmi	r6, r6
 80045de:	e7e6      	b.n	80045ae <_printf_i+0x182>
 80045e0:	4615      	mov	r5, r2
 80045e2:	e7bb      	b.n	800455c <_printf_i+0x130>
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	6826      	ldr	r6, [r4, #0]
 80045e8:	6961      	ldr	r1, [r4, #20]
 80045ea:	1d18      	adds	r0, r3, #4
 80045ec:	6028      	str	r0, [r5, #0]
 80045ee:	0635      	lsls	r5, r6, #24
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	d501      	bpl.n	80045f8 <_printf_i+0x1cc>
 80045f4:	6019      	str	r1, [r3, #0]
 80045f6:	e002      	b.n	80045fe <_printf_i+0x1d2>
 80045f8:	0670      	lsls	r0, r6, #25
 80045fa:	d5fb      	bpl.n	80045f4 <_printf_i+0x1c8>
 80045fc:	8019      	strh	r1, [r3, #0]
 80045fe:	2300      	movs	r3, #0
 8004600:	6123      	str	r3, [r4, #16]
 8004602:	4615      	mov	r5, r2
 8004604:	e7ba      	b.n	800457c <_printf_i+0x150>
 8004606:	682b      	ldr	r3, [r5, #0]
 8004608:	1d1a      	adds	r2, r3, #4
 800460a:	602a      	str	r2, [r5, #0]
 800460c:	681d      	ldr	r5, [r3, #0]
 800460e:	6862      	ldr	r2, [r4, #4]
 8004610:	2100      	movs	r1, #0
 8004612:	4628      	mov	r0, r5
 8004614:	f7fb fdec 	bl	80001f0 <memchr>
 8004618:	b108      	cbz	r0, 800461e <_printf_i+0x1f2>
 800461a:	1b40      	subs	r0, r0, r5
 800461c:	6060      	str	r0, [r4, #4]
 800461e:	6863      	ldr	r3, [r4, #4]
 8004620:	6123      	str	r3, [r4, #16]
 8004622:	2300      	movs	r3, #0
 8004624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004628:	e7a8      	b.n	800457c <_printf_i+0x150>
 800462a:	6923      	ldr	r3, [r4, #16]
 800462c:	462a      	mov	r2, r5
 800462e:	4649      	mov	r1, r9
 8004630:	4640      	mov	r0, r8
 8004632:	47d0      	blx	sl
 8004634:	3001      	adds	r0, #1
 8004636:	d0ab      	beq.n	8004590 <_printf_i+0x164>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	079b      	lsls	r3, r3, #30
 800463c:	d413      	bmi.n	8004666 <_printf_i+0x23a>
 800463e:	68e0      	ldr	r0, [r4, #12]
 8004640:	9b03      	ldr	r3, [sp, #12]
 8004642:	4298      	cmp	r0, r3
 8004644:	bfb8      	it	lt
 8004646:	4618      	movlt	r0, r3
 8004648:	e7a4      	b.n	8004594 <_printf_i+0x168>
 800464a:	2301      	movs	r3, #1
 800464c:	4632      	mov	r2, r6
 800464e:	4649      	mov	r1, r9
 8004650:	4640      	mov	r0, r8
 8004652:	47d0      	blx	sl
 8004654:	3001      	adds	r0, #1
 8004656:	d09b      	beq.n	8004590 <_printf_i+0x164>
 8004658:	3501      	adds	r5, #1
 800465a:	68e3      	ldr	r3, [r4, #12]
 800465c:	9903      	ldr	r1, [sp, #12]
 800465e:	1a5b      	subs	r3, r3, r1
 8004660:	42ab      	cmp	r3, r5
 8004662:	dcf2      	bgt.n	800464a <_printf_i+0x21e>
 8004664:	e7eb      	b.n	800463e <_printf_i+0x212>
 8004666:	2500      	movs	r5, #0
 8004668:	f104 0619 	add.w	r6, r4, #25
 800466c:	e7f5      	b.n	800465a <_printf_i+0x22e>
 800466e:	bf00      	nop
 8004670:	080049a1 	.word	0x080049a1
 8004674:	080049b2 	.word	0x080049b2

08004678 <memcpy>:
 8004678:	440a      	add	r2, r1
 800467a:	4291      	cmp	r1, r2
 800467c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004680:	d100      	bne.n	8004684 <memcpy+0xc>
 8004682:	4770      	bx	lr
 8004684:	b510      	push	{r4, lr}
 8004686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800468a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800468e:	4291      	cmp	r1, r2
 8004690:	d1f9      	bne.n	8004686 <memcpy+0xe>
 8004692:	bd10      	pop	{r4, pc}

08004694 <memmove>:
 8004694:	4288      	cmp	r0, r1
 8004696:	b510      	push	{r4, lr}
 8004698:	eb01 0402 	add.w	r4, r1, r2
 800469c:	d902      	bls.n	80046a4 <memmove+0x10>
 800469e:	4284      	cmp	r4, r0
 80046a0:	4623      	mov	r3, r4
 80046a2:	d807      	bhi.n	80046b4 <memmove+0x20>
 80046a4:	1e43      	subs	r3, r0, #1
 80046a6:	42a1      	cmp	r1, r4
 80046a8:	d008      	beq.n	80046bc <memmove+0x28>
 80046aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046b2:	e7f8      	b.n	80046a6 <memmove+0x12>
 80046b4:	4402      	add	r2, r0
 80046b6:	4601      	mov	r1, r0
 80046b8:	428a      	cmp	r2, r1
 80046ba:	d100      	bne.n	80046be <memmove+0x2a>
 80046bc:	bd10      	pop	{r4, pc}
 80046be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046c6:	e7f7      	b.n	80046b8 <memmove+0x24>

080046c8 <_free_r>:
 80046c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046ca:	2900      	cmp	r1, #0
 80046cc:	d044      	beq.n	8004758 <_free_r+0x90>
 80046ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046d2:	9001      	str	r0, [sp, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f1a1 0404 	sub.w	r4, r1, #4
 80046da:	bfb8      	it	lt
 80046dc:	18e4      	addlt	r4, r4, r3
 80046de:	f000 f913 	bl	8004908 <__malloc_lock>
 80046e2:	4a1e      	ldr	r2, [pc, #120]	; (800475c <_free_r+0x94>)
 80046e4:	9801      	ldr	r0, [sp, #4]
 80046e6:	6813      	ldr	r3, [r2, #0]
 80046e8:	b933      	cbnz	r3, 80046f8 <_free_r+0x30>
 80046ea:	6063      	str	r3, [r4, #4]
 80046ec:	6014      	str	r4, [r2, #0]
 80046ee:	b003      	add	sp, #12
 80046f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046f4:	f000 b90e 	b.w	8004914 <__malloc_unlock>
 80046f8:	42a3      	cmp	r3, r4
 80046fa:	d908      	bls.n	800470e <_free_r+0x46>
 80046fc:	6825      	ldr	r5, [r4, #0]
 80046fe:	1961      	adds	r1, r4, r5
 8004700:	428b      	cmp	r3, r1
 8004702:	bf01      	itttt	eq
 8004704:	6819      	ldreq	r1, [r3, #0]
 8004706:	685b      	ldreq	r3, [r3, #4]
 8004708:	1949      	addeq	r1, r1, r5
 800470a:	6021      	streq	r1, [r4, #0]
 800470c:	e7ed      	b.n	80046ea <_free_r+0x22>
 800470e:	461a      	mov	r2, r3
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	b10b      	cbz	r3, 8004718 <_free_r+0x50>
 8004714:	42a3      	cmp	r3, r4
 8004716:	d9fa      	bls.n	800470e <_free_r+0x46>
 8004718:	6811      	ldr	r1, [r2, #0]
 800471a:	1855      	adds	r5, r2, r1
 800471c:	42a5      	cmp	r5, r4
 800471e:	d10b      	bne.n	8004738 <_free_r+0x70>
 8004720:	6824      	ldr	r4, [r4, #0]
 8004722:	4421      	add	r1, r4
 8004724:	1854      	adds	r4, r2, r1
 8004726:	42a3      	cmp	r3, r4
 8004728:	6011      	str	r1, [r2, #0]
 800472a:	d1e0      	bne.n	80046ee <_free_r+0x26>
 800472c:	681c      	ldr	r4, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	6053      	str	r3, [r2, #4]
 8004732:	4421      	add	r1, r4
 8004734:	6011      	str	r1, [r2, #0]
 8004736:	e7da      	b.n	80046ee <_free_r+0x26>
 8004738:	d902      	bls.n	8004740 <_free_r+0x78>
 800473a:	230c      	movs	r3, #12
 800473c:	6003      	str	r3, [r0, #0]
 800473e:	e7d6      	b.n	80046ee <_free_r+0x26>
 8004740:	6825      	ldr	r5, [r4, #0]
 8004742:	1961      	adds	r1, r4, r5
 8004744:	428b      	cmp	r3, r1
 8004746:	bf04      	itt	eq
 8004748:	6819      	ldreq	r1, [r3, #0]
 800474a:	685b      	ldreq	r3, [r3, #4]
 800474c:	6063      	str	r3, [r4, #4]
 800474e:	bf04      	itt	eq
 8004750:	1949      	addeq	r1, r1, r5
 8004752:	6021      	streq	r1, [r4, #0]
 8004754:	6054      	str	r4, [r2, #4]
 8004756:	e7ca      	b.n	80046ee <_free_r+0x26>
 8004758:	b003      	add	sp, #12
 800475a:	bd30      	pop	{r4, r5, pc}
 800475c:	20000190 	.word	0x20000190

08004760 <sbrk_aligned>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	4e0e      	ldr	r6, [pc, #56]	; (800479c <sbrk_aligned+0x3c>)
 8004764:	460c      	mov	r4, r1
 8004766:	6831      	ldr	r1, [r6, #0]
 8004768:	4605      	mov	r5, r0
 800476a:	b911      	cbnz	r1, 8004772 <sbrk_aligned+0x12>
 800476c:	f000 f8bc 	bl	80048e8 <_sbrk_r>
 8004770:	6030      	str	r0, [r6, #0]
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f000 f8b7 	bl	80048e8 <_sbrk_r>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	d00a      	beq.n	8004794 <sbrk_aligned+0x34>
 800477e:	1cc4      	adds	r4, r0, #3
 8004780:	f024 0403 	bic.w	r4, r4, #3
 8004784:	42a0      	cmp	r0, r4
 8004786:	d007      	beq.n	8004798 <sbrk_aligned+0x38>
 8004788:	1a21      	subs	r1, r4, r0
 800478a:	4628      	mov	r0, r5
 800478c:	f000 f8ac 	bl	80048e8 <_sbrk_r>
 8004790:	3001      	adds	r0, #1
 8004792:	d101      	bne.n	8004798 <sbrk_aligned+0x38>
 8004794:	f04f 34ff 	mov.w	r4, #4294967295
 8004798:	4620      	mov	r0, r4
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	20000194 	.word	0x20000194

080047a0 <_malloc_r>:
 80047a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a4:	1ccd      	adds	r5, r1, #3
 80047a6:	f025 0503 	bic.w	r5, r5, #3
 80047aa:	3508      	adds	r5, #8
 80047ac:	2d0c      	cmp	r5, #12
 80047ae:	bf38      	it	cc
 80047b0:	250c      	movcc	r5, #12
 80047b2:	2d00      	cmp	r5, #0
 80047b4:	4607      	mov	r7, r0
 80047b6:	db01      	blt.n	80047bc <_malloc_r+0x1c>
 80047b8:	42a9      	cmp	r1, r5
 80047ba:	d905      	bls.n	80047c8 <_malloc_r+0x28>
 80047bc:	230c      	movs	r3, #12
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	2600      	movs	r6, #0
 80047c2:	4630      	mov	r0, r6
 80047c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c8:	4e2e      	ldr	r6, [pc, #184]	; (8004884 <_malloc_r+0xe4>)
 80047ca:	f000 f89d 	bl	8004908 <__malloc_lock>
 80047ce:	6833      	ldr	r3, [r6, #0]
 80047d0:	461c      	mov	r4, r3
 80047d2:	bb34      	cbnz	r4, 8004822 <_malloc_r+0x82>
 80047d4:	4629      	mov	r1, r5
 80047d6:	4638      	mov	r0, r7
 80047d8:	f7ff ffc2 	bl	8004760 <sbrk_aligned>
 80047dc:	1c43      	adds	r3, r0, #1
 80047de:	4604      	mov	r4, r0
 80047e0:	d14d      	bne.n	800487e <_malloc_r+0xde>
 80047e2:	6834      	ldr	r4, [r6, #0]
 80047e4:	4626      	mov	r6, r4
 80047e6:	2e00      	cmp	r6, #0
 80047e8:	d140      	bne.n	800486c <_malloc_r+0xcc>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	4631      	mov	r1, r6
 80047ee:	4638      	mov	r0, r7
 80047f0:	eb04 0803 	add.w	r8, r4, r3
 80047f4:	f000 f878 	bl	80048e8 <_sbrk_r>
 80047f8:	4580      	cmp	r8, r0
 80047fa:	d13a      	bne.n	8004872 <_malloc_r+0xd2>
 80047fc:	6821      	ldr	r1, [r4, #0]
 80047fe:	3503      	adds	r5, #3
 8004800:	1a6d      	subs	r5, r5, r1
 8004802:	f025 0503 	bic.w	r5, r5, #3
 8004806:	3508      	adds	r5, #8
 8004808:	2d0c      	cmp	r5, #12
 800480a:	bf38      	it	cc
 800480c:	250c      	movcc	r5, #12
 800480e:	4629      	mov	r1, r5
 8004810:	4638      	mov	r0, r7
 8004812:	f7ff ffa5 	bl	8004760 <sbrk_aligned>
 8004816:	3001      	adds	r0, #1
 8004818:	d02b      	beq.n	8004872 <_malloc_r+0xd2>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	442b      	add	r3, r5
 800481e:	6023      	str	r3, [r4, #0]
 8004820:	e00e      	b.n	8004840 <_malloc_r+0xa0>
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	1b52      	subs	r2, r2, r5
 8004826:	d41e      	bmi.n	8004866 <_malloc_r+0xc6>
 8004828:	2a0b      	cmp	r2, #11
 800482a:	d916      	bls.n	800485a <_malloc_r+0xba>
 800482c:	1961      	adds	r1, r4, r5
 800482e:	42a3      	cmp	r3, r4
 8004830:	6025      	str	r5, [r4, #0]
 8004832:	bf18      	it	ne
 8004834:	6059      	strne	r1, [r3, #4]
 8004836:	6863      	ldr	r3, [r4, #4]
 8004838:	bf08      	it	eq
 800483a:	6031      	streq	r1, [r6, #0]
 800483c:	5162      	str	r2, [r4, r5]
 800483e:	604b      	str	r3, [r1, #4]
 8004840:	4638      	mov	r0, r7
 8004842:	f104 060b 	add.w	r6, r4, #11
 8004846:	f000 f865 	bl	8004914 <__malloc_unlock>
 800484a:	f026 0607 	bic.w	r6, r6, #7
 800484e:	1d23      	adds	r3, r4, #4
 8004850:	1af2      	subs	r2, r6, r3
 8004852:	d0b6      	beq.n	80047c2 <_malloc_r+0x22>
 8004854:	1b9b      	subs	r3, r3, r6
 8004856:	50a3      	str	r3, [r4, r2]
 8004858:	e7b3      	b.n	80047c2 <_malloc_r+0x22>
 800485a:	6862      	ldr	r2, [r4, #4]
 800485c:	42a3      	cmp	r3, r4
 800485e:	bf0c      	ite	eq
 8004860:	6032      	streq	r2, [r6, #0]
 8004862:	605a      	strne	r2, [r3, #4]
 8004864:	e7ec      	b.n	8004840 <_malloc_r+0xa0>
 8004866:	4623      	mov	r3, r4
 8004868:	6864      	ldr	r4, [r4, #4]
 800486a:	e7b2      	b.n	80047d2 <_malloc_r+0x32>
 800486c:	4634      	mov	r4, r6
 800486e:	6876      	ldr	r6, [r6, #4]
 8004870:	e7b9      	b.n	80047e6 <_malloc_r+0x46>
 8004872:	230c      	movs	r3, #12
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	4638      	mov	r0, r7
 8004878:	f000 f84c 	bl	8004914 <__malloc_unlock>
 800487c:	e7a1      	b.n	80047c2 <_malloc_r+0x22>
 800487e:	6025      	str	r5, [r4, #0]
 8004880:	e7de      	b.n	8004840 <_malloc_r+0xa0>
 8004882:	bf00      	nop
 8004884:	20000190 	.word	0x20000190

08004888 <_realloc_r>:
 8004888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488c:	4680      	mov	r8, r0
 800488e:	4614      	mov	r4, r2
 8004890:	460e      	mov	r6, r1
 8004892:	b921      	cbnz	r1, 800489e <_realloc_r+0x16>
 8004894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004898:	4611      	mov	r1, r2
 800489a:	f7ff bf81 	b.w	80047a0 <_malloc_r>
 800489e:	b92a      	cbnz	r2, 80048ac <_realloc_r+0x24>
 80048a0:	f7ff ff12 	bl	80046c8 <_free_r>
 80048a4:	4625      	mov	r5, r4
 80048a6:	4628      	mov	r0, r5
 80048a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048ac:	f000 f838 	bl	8004920 <_malloc_usable_size_r>
 80048b0:	4284      	cmp	r4, r0
 80048b2:	4607      	mov	r7, r0
 80048b4:	d802      	bhi.n	80048bc <_realloc_r+0x34>
 80048b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048ba:	d812      	bhi.n	80048e2 <_realloc_r+0x5a>
 80048bc:	4621      	mov	r1, r4
 80048be:	4640      	mov	r0, r8
 80048c0:	f7ff ff6e 	bl	80047a0 <_malloc_r>
 80048c4:	4605      	mov	r5, r0
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d0ed      	beq.n	80048a6 <_realloc_r+0x1e>
 80048ca:	42bc      	cmp	r4, r7
 80048cc:	4622      	mov	r2, r4
 80048ce:	4631      	mov	r1, r6
 80048d0:	bf28      	it	cs
 80048d2:	463a      	movcs	r2, r7
 80048d4:	f7ff fed0 	bl	8004678 <memcpy>
 80048d8:	4631      	mov	r1, r6
 80048da:	4640      	mov	r0, r8
 80048dc:	f7ff fef4 	bl	80046c8 <_free_r>
 80048e0:	e7e1      	b.n	80048a6 <_realloc_r+0x1e>
 80048e2:	4635      	mov	r5, r6
 80048e4:	e7df      	b.n	80048a6 <_realloc_r+0x1e>
	...

080048e8 <_sbrk_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4d06      	ldr	r5, [pc, #24]	; (8004904 <_sbrk_r+0x1c>)
 80048ec:	2300      	movs	r3, #0
 80048ee:	4604      	mov	r4, r0
 80048f0:	4608      	mov	r0, r1
 80048f2:	602b      	str	r3, [r5, #0]
 80048f4:	f7fc fa06 	bl	8000d04 <_sbrk>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d102      	bne.n	8004902 <_sbrk_r+0x1a>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	b103      	cbz	r3, 8004902 <_sbrk_r+0x1a>
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	20000198 	.word	0x20000198

08004908 <__malloc_lock>:
 8004908:	4801      	ldr	r0, [pc, #4]	; (8004910 <__malloc_lock+0x8>)
 800490a:	f000 b811 	b.w	8004930 <__retarget_lock_acquire_recursive>
 800490e:	bf00      	nop
 8004910:	2000019c 	.word	0x2000019c

08004914 <__malloc_unlock>:
 8004914:	4801      	ldr	r0, [pc, #4]	; (800491c <__malloc_unlock+0x8>)
 8004916:	f000 b80c 	b.w	8004932 <__retarget_lock_release_recursive>
 800491a:	bf00      	nop
 800491c:	2000019c 	.word	0x2000019c

08004920 <_malloc_usable_size_r>:
 8004920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004924:	1f18      	subs	r0, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	bfbc      	itt	lt
 800492a:	580b      	ldrlt	r3, [r1, r0]
 800492c:	18c0      	addlt	r0, r0, r3
 800492e:	4770      	bx	lr

08004930 <__retarget_lock_acquire_recursive>:
 8004930:	4770      	bx	lr

08004932 <__retarget_lock_release_recursive>:
 8004932:	4770      	bx	lr

08004934 <_init>:
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004936:	bf00      	nop
 8004938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493a:	bc08      	pop	{r3}
 800493c:	469e      	mov	lr, r3
 800493e:	4770      	bx	lr

08004940 <_fini>:
 8004940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004942:	bf00      	nop
 8004944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004946:	bc08      	pop	{r3}
 8004948:	469e      	mov	lr, r3
 800494a:	4770      	bx	lr
